// src/services/websocket.ts
import { useState, useEffect, useCallback, useRef } from 'react';

const WS_URL = process.env.REACT_APP_WS_URL || 'ws://localhost:8001/ws';

export interface WebSocketMessage {
  type: 'bot_status' | 'price_update' | 'trade_executed' | 'order_update' | 'notification' | 'error';
  data: any;
  timestamp: string;
}

export interface WebSocketState {
  isConnected: boolean;
  lastMessage: WebSocketMessage | null;
  error: string | null;
  reconnectAttempts: number;
}

class WebSocketService {
  private ws: WebSocket | null = null;
  private listeners: Map<string, Set<(message: WebSocketMessage) => void>> = new Map();
  private reconnectAttempts = 0;
  private maxReconnectAttempts = 5;
  private reconnectDelay = 1000;
  private isConnecting = false;

  connect(): Promise<void> {
    return new Promise((resolve, reject) => {
      if (this.ws?.readyState === WebSocket.OPEN) {
        resolve();
        return;
      }

      if (this.isConnecting) {
        reject(new Error('Already connecting'));
        return;
      }

      this.isConnecting = true;

      try {
        this.ws = new WebSocket(WS_URL);

        this.ws.onopen = () => {
          console.log('üîó WebSocket Connected');
          this.isConnecting = false;
          this.reconnectAttempts = 0;
          this.notifyListeners('connection', {
            type: 'connection' as any,
            data: { connected: true },
            timestamp: new Date().toISOString()
          });
          resolve();
        };

        this.ws.onmessage = (event) => {
          try {
            const message: WebSocketMessage = JSON.parse(event.data);
            console.log('üì® WebSocket Message:', message);
            this.notifyListeners(message.type, message);
            this.notifyListeners('*', message); // –£–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π
          } catch (error) {
            console.error('‚ùå WebSocket message parsing error:', error);
          }
        };

        this.ws.onclose = () => {
          console.log('üîå WebSocket Disconnected');
          this.isConnecting = false;
          this.notifyListeners('connection', {
            type: 'connection' as any,
            data: { connected: false },
            timestamp: new Date().toISOString()
          });
          this.handleReconnect();
        };

        this.ws.onerror = (error) => {
          console.error('‚ùå WebSocket Error:', error);
          this.isConnecting = false;
          this.notifyListeners('error', {
            type: 'error',
            data: { error: 'WebSocket connection error' },
            timestamp: new Date().toISOString()
          });
          reject(error);
        };

      } catch (error) {
        this.isConnecting = false;
        reject(error);
      }
    });
  }

  disconnect() {
    if (this.ws) {
      this.ws.close();
      this.ws = null;
    }
  }

  send(message: any) {
    if (this.ws?.readyState === WebSocket.OPEN) {
      this.ws.send(JSON.stringify(message));
    } else {
      console.warn('‚ö†Ô∏è WebSocket is not connected');
    }
  }

  subscribe(eventType: string, callback: (message: WebSocketMessage) => void) {
    if (!this.listeners.has(eventType)) {
      this.listeners.set(eventType, new Set());
    }
    this.listeners.get(eventType)!.add(callback);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏
    return () => {
      const callbacks = this.listeners.get(eventType);
      if (callbacks) {
        callbacks.delete(callback);
        if (callbacks.size === 0) {
          this.listeners.delete(eventType);
        }
      }
    };
  }

  private notifyListeners(eventType: string, message: WebSocketMessage) {
    const callbacks = this.listeners.get(eventType);
    if (callbacks) {
      callbacks.forEach(callback => callback(message));
    }
  }

  private handleReconnect() {
    if (this.reconnectAttempts < this.maxReconnectAttempts) {
      this.reconnectAttempts++;
      const delay = this.reconnectDelay * this.reconnectAttempts;

      console.log(`üîÑ Reconnecting in ${delay}ms (attempt ${this.reconnectAttempts}/${this.maxReconnectAttempts})`);

      setTimeout(() => {
        this.connect().catch(error => {
          console.error('‚ùå Reconnection failed:', error);
        });
      }, delay);
    } else {
      console.error('‚ùå Max reconnection attempts reached');
    }
  }

  isConnected(): boolean {
    return this.ws?.readyState === WebSocket.OPEN;
  }
}

// Singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
const wsService = new WebSocketService();
export default wsService;

// React Hook –¥–ª—è WebSocket
export function useWebSocket() {
  const [state, setState] = useState<WebSocketState>({
    isConnected: false,
    lastMessage: null,
    error: null,
    reconnectAttempts: 0
  });

  const messageHandlers = useRef<Map<string, (message: WebSocketMessage) => void>>(new Map());

  useEffect(() => {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    wsService.connect().catch(error => {
      setState(prev => ({ ...prev, error: error.message }));
    });

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const unsubscribeConnection = wsService.subscribe('connection', (message) => {
      setState(prev => ({
        ...prev,
        isConnected: message.data.connected,
        error: message.data.connected ? null : prev.error
      }));
    });

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    const unsubscribeAll = wsService.subscribe('*', (message) => {
      setState(prev => ({ ...prev, lastMessage: message }));
    });

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏
    const unsubscribeErrors = wsService.subscribe('error', (message) => {
      setState(prev => ({ ...prev, error: message.data.error }));
    });

    return () => {
      unsubscribeConnection();
      unsubscribeAll();
      unsubscribeErrors();
      wsService.disconnect();
    };
  }, []);

  const subscribe = useCallback((eventType: string, handler: (message: WebSocketMessage) => void) => {
    return wsService.subscribe(eventType, handler);
  }, []);

  const send = useCallback((message: any) => {
    wsService.send(message);
  }, []);

  return {
    ...state,
    subscribe,
    send,
    connect: () => wsService.connect(),
    disconnect: () => wsService.disconnect()
  };
}

// –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ö—É–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö

// –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ü–µ–Ω
export function usePriceUpdates() {
  const [prices, setPrices] = useState<Record<string, { price: string; change: string }>>({});
  const { subscribe } = useWebSocket();

  useEffect(() => {
    const unsubscribe = subscribe('price_update', (message) => {
      const { symbol, price, change } = message.data;
      setPrices(prev => ({
        ...prev,
        [symbol]: { price, change }
      }));
    });

    return unsubscribe;
  }, [subscribe]);

  return prices;
}

// –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
export function useBotStatusUpdates() {
  const [botStatus, setBotStatus] = useState<any>(null);
  const { subscribe } = useWebSocket();

  useEffect(() => {
    const unsubscribe = subscribe('bot_status', (message) => {
      setBotStatus(message.data);
    });

    return unsubscribe;
  }, [subscribe]);

  return botStatus;
}

// –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–¥–µ–ª–∫–∞—Ö
export function useTradeUpdates() {
  const [trades, setTrades] = useState<any[]>([]);
  const { subscribe } = useWebSocket();

  useEffect(() => {
    const unsubscribe = subscribe('trade_executed', (message) => {
      setTrades(prev => [message.data, ...prev.slice(0, 99)]); // –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–¥–µ–ª–æ–∫
    });

    return unsubscribe;
  }, [subscribe]);

  return trades;
}

// –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ä–¥–µ—Ä–æ–≤
export function useOrderUpdates() {
  const [orderUpdates, setOrderUpdates] = useState<any[]>([]);
  const { subscribe } = useWebSocket();

  useEffect(() => {
    const unsubscribe = subscribe('order_update', (message) => {
      setOrderUpdates(prev => [message.data, ...prev.slice(0, 49)]); // –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    });

    return unsubscribe;
  }, [subscribe]);

  return orderUpdates;
}

// –•—É–∫ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
export function useNotificationUpdates() {
  const [notifications, setNotifications] = useState<any[]>([]);
  const { subscribe } = useWebSocket();

  useEffect(() => {
    const unsubscribe = subscribe('notification', (message) => {
      setNotifications(prev => [message.data, ...prev]);
    });

    return unsubscribe;
  }, [subscribe]);

  const clearNotifications = useCallback(() => {
    setNotifications([]);
  }, []);

  return { notifications, clearNotifications };
}

/*
===========================================
üìã QUICK START INSTRUCTIONS
===========================================

1. –°–û–ó–î–ê–ù–ò–ï –ü–†–û–ï–ö–¢–ê:
```bash
npx create-react-app trading-bot-dashboard --template typescript
cd trading-bot-dashboard
```

2. –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô:
```bash
npm install lucide-react recharts
npm install -D tailwindcss postcss autoprefixer @tailwindcss/forms
npx tailwindcss init -p
```

3. –ù–ê–°–¢–†–û–ô–ö–ê –§–ê–ô–õ–û–í:

üìÑ src/index.css:
```css
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
  background-color: #111827;
  color: white;
}
```

üìÑ .env:
```env
REACT_APP_API_URL=http://localhost:8000
REACT_APP_WS_URL=ws://localhost:8001/ws
```

üìÑ src/App.tsx:
```typescript
import React from 'react';
import TradingBotApp from './TradingBotApp';

function App() {
  return <TradingBotApp />;
}

export default App;
```

4. –°–û–ó–î–ê–ù–ò–ï –ö–û–ú–ü–û–ù–ï–ù–¢–û–í:

–°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É src/components/ –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç—É–¥–∞ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
- TradingBotUI.tsx
- TradingAnalytics.tsx
- PortfolioManagement.tsx
- StrategyBuilder.tsx
- TradingLogs.tsx
- Notifications.tsx
- BotSettings.tsx

5. –°–û–ó–î–ê–ù–ò–ï –°–ï–†–í–ò–°–û–í:

üìÅ src/services/
- api.ts (—ç—Ç–æ—Ç —Ñ–∞–π–ª)
- websocket.ts (—Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª)

6. –ó–ê–ü–£–°–ö:
```bash
npm start
```

===========================================
üîó FASTAPI REQUIREMENTS
===========================================

–í–∞—à FastAPI –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å endpoints:

ü§ñ Bot Management:
- GET /api/bot/status
- POST /api/bot/start
- POST /api/bot/stop
- POST /api/bot/toggle

üìä Trading:
- GET /api/symbols
- POST /api/symbols/{symbol}/toggle
- GET /api/orders
- DELETE /api/orders/{id}/cancel

üí∞ Account:
- GET /api/account/balance
- GET /api/account/portfolio

üìà Analytics:
- GET /api/stats
- GET /api/trading/history

‚öôÔ∏è Settings:
- GET /api/settings
- PUT /api/settings

üîî Notifications:
- GET /api/notifications
- POST /api/notifications/{id}/read

üåê WebSocket (/ws):
- bot_status updates
- price_update events
- trade_executed events
- order_update events
- notification events

===========================================
üì¶ DEPLOYMENT
===========================================

Development:
```bash
npm start
```

Production Build:
```bash
npm run build
# –§–∞–π–ª—ã –≤ build/ –≥–æ—Ç–æ–≤—ã –¥–ª—è –¥–µ–ø–ª–æ—è
```

Docker:
```dockerfile
FROM node:18-alpine as build
WORKDIR /app
COPY package*.json ./
RUN npm ci
COPY . .
RUN npm run build

FROM nginx:alpine
COPY --from=build /app/build /usr/share/nginx/html
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
```

===========================================
üéØ –ì–û–¢–û–í–û!
===========================================

–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —à–∞–≥–æ–≤ —É –≤–∞—Å –±—É–¥–µ—Ç:
‚úÖ –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è React –ø–∞–Ω–µ–ª—å
‚úÖ Real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket
‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ FastAPI backend
‚úÖ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω
‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º

–ó–∞–ø—É—Å—Ç–∏—Ç–µ npm start –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å! üöÄ
*/