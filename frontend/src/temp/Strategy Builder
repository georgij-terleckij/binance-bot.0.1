import React, { useState, useEffect } from 'react';
import {
  Plus,
  Edit,
  Trash2,
  Play,
  Pause,
  Copy,
  Save,
  RotateCcw,
  TrendingUp,
  TrendingDown,
  Target,
  Shield,
  Zap,
  Settings,
  BarChart3,
  AlertTriangle,
  CheckCircle,
  Clock,
  DollarSign
} from 'lucide-react';

interface Strategy {
  id: string;
  name: string;
  description: string;
  type: 'grid' | 'dca' | 'scalping' | 'arbitrage' | 'custom';
  status: 'active' | 'inactive' | 'paused';
  symbols: string[];
  parameters: {
    [key: string]: any;
  };
  performance: {
    totalTrades: number;
    winRate: number;
    totalPnL: number;
    maxDrawdown: number;
    sharpeRatio: number;
  };
  riskManagement: {
    maxPositions: number;
    maxRiskPerTrade: number;
    stopLoss: number;
    takeProfit: number;
    dailyLossLimit: number;
  };
  createdAt: string;
  lastModified: string;
  backtestedFrom?: string;
  backtestedTo?: string;
}

interface StrategyTemplate {
  type: string;
  name: string;
  description: string;
  icon: React.ReactNode;
  defaultParameters: { [key: string]: any };
  parameterDefinitions: {
    [key: string]: {
      type: 'number' | 'boolean' | 'string' | 'select';
      label: string;
      description: string;
      min?: number;
      max?: number;
      step?: number;
      options?: string[];
      default: any;
    };
  };
}

// Mock strategies data
const mockStrategies: Strategy[] = [
  {
    id: '1',
    name: 'BTC Grid Strategy',
    description: 'Grid trading strategy for Bitcoin with 10% spacing',
    type: 'grid',
    status: 'active',
    symbols: ['BTCUSDT'],
    parameters: {
      gridLevels: 10,
      spacing: 0.01,
      baseOrderSize: 100,
      upperBound: 50000,
      lowerBound: 40000
    },
    performance: {
      totalTrades: 234,
      winRate: 72.5,
      totalPnL: 1245.67,
      maxDrawdown: -234.56,
      sharpeRatio: 2.34
    },
    riskManagement: {
      maxPositions: 5,
      maxRiskPerTrade: 2,
      stopLoss: 5,
      takeProfit: 3,
      dailyLossLimit: 500
    },
    createdAt: '2025-05-20T10:00:00Z',
    lastModified: '2025-05-28T14:30:00Z'
  },
  {
    id: '2',
    name: 'Multi-Asset DCA',
    description: 'Dollar Cost Averaging across multiple assets',
    type: 'dca',
    status: 'active',
    symbols: ['BTCUSDT', 'ETHUSDT', 'ADAUSDT'],
    parameters: {
      interval: 'daily',
      amount: 50,
      deviation: 2.5,
      safetyOrders: 5,
      volumeScale: 1.5,
      stepScale: 1.2
    },
    performance: {
      totalTrades: 156,
      winRate: 68.2,
      totalPnL: 890.45,
      maxDrawdown: -156.78,
      sharpeRatio: 1.89
    },
    riskManagement: {
      maxPositions: 10,
      maxRiskPerTrade: 1.5,
      stopLoss: 10,
      takeProfit: 5,
      dailyLossLimit: 300
    },
    createdAt: '2025-05-15T09:00:00Z',
    lastModified: '2025-05-29T12:15:00Z'
  },
  {
    id: '3',
    name: 'High-Freq Scalping',
    description: 'High frequency scalping for small profits',
    type: 'scalping',
    status: 'paused',
    symbols: ['BTCUSDT', 'ETHUSDT'],
    parameters: {
      timeframe: '1m',
      profitTarget: 0.1,
      maxHoldTime: 300,
      rsiThreshold: 70,
      volumeFilter: 1000000
    },
    performance: {
      totalTrades: 1245,
      winRate: 58.3,
      totalPnL: 567.89,
      maxDrawdown: -123.45,
      sharpeRatio: 1.45
    },
    riskManagement: {
      maxPositions: 3,
      maxRiskPerTrade: 0.5,
      stopLoss: 0.2,
      takeProfit: 0.1,
      dailyLossLimit: 100
    },
    createdAt: '2025-05-10T15:30:00Z',
    lastModified: '2025-05-25T11:45:00Z'
  }
];

// Strategy templates
const strategyTemplates: StrategyTemplate[] = [
  {
    type: 'grid',
    name: 'Grid Trading',
    description: 'Place buy and sell orders at regular intervals above and below current price',
    icon: <BarChart3 className="w-6 h-6" />,
    defaultParameters: {
      gridLevels: 10,
      spacing: 0.01,
      baseOrderSize: 100,
      upperBound: 0,
      lowerBound: 0
    },
    parameterDefinitions: {
      gridLevels: {
        type: 'number',
        label: 'Grid Levels',
        description: 'Number of buy/sell orders to place',
        min: 3,
        max: 50,
        default: 10
      },
      spacing: {
        type: 'number',
        label: 'Spacing (%)',
        description: 'Percentage spacing between grid levels',
        min: 0.1,
        max: 10,
        step: 0.1,
        default: 1
      },
      baseOrderSize: {
        type: 'number',
        label: 'Base Order Size ($)',
        description: 'Size of each grid order in USDT',
        min: 10,
        max: 10000,
        default: 100
      }
    }
  },
  {
    type: 'dca',
    name: 'Dollar Cost Averaging',
    description: 'Invest fixed amounts at regular intervals with safety orders',
    icon: <TrendingUp className="w-6 h-6" />,
    defaultParameters: {
      interval: 'daily',
      amount: 50,
      deviation: 2.5,
      safetyOrders: 5,
      volumeScale: 1.5
    },
    parameterDefinitions: {
      interval: {
        type: 'select',
        label: 'Investment Interval',
        description: 'How often to make investments',
        options: ['hourly', '4h', 'daily', 'weekly'],
        default: 'daily'
      },
      amount: {
        type: 'number',
        label: 'Base Amount ($)',
        description: 'Base investment amount in USDT',
        min: 10,
        max: 1000,
        default: 50
      },
      deviation: {
        type: 'number',
        label: 'Deviation (%)',
        description: 'Price deviation to trigger safety orders',
        min: 0.5,
        max: 10,
        step: 0.1,
        default: 2.5
      }
    }
  },
  {
    type: 'scalping',
    name: 'Scalping',
    description: 'Quick trades for small profits using technical indicators',
    icon: <Zap className="w-6 h-6" />,
    defaultParameters: {
      timeframe: '1m',
      profitTarget: 0.1,
      maxHoldTime: 300,
      rsiThreshold: 70
    },
    parameterDefinitions: {
      timeframe: {
        type: 'select',
        label: 'Timeframe',
        description: 'Chart timeframe for analysis',
        options: ['1m', '3m', '5m', '15m'],
        default: '1m'
      },
      profitTarget: {
        type: 'number',
        label: 'Profit Target (%)',
        description: 'Target profit percentage per trade',
        min: 0.05,
        max: 2,
        step: 0.01,
        default: 0.1
      },
      maxHoldTime: {
        type: 'number',
        label: 'Max Hold Time (sec)',
        description: 'Maximum time to hold a position',
        min: 60,
        max: 3600,
        default: 300
      }
    }
  }
];

const StrategyBuilderComponent = () => {
  const [strategies, setStrategies] = useState<Strategy[]>(mockStrategies);
  const [selectedStrategy, setSelectedStrategy] = useState<Strategy | null>(null);
  const [isEditing, setIsEditing] = useState(false);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [selectedTemplate, setSelectedTemplate] = useState<StrategyTemplate | null>(null);
  const [newStrategyParams, setNewStrategyParams] = useState<any>({});

  const createStrategy = () => {
    if (!selectedTemplate) return;

    const newStrategy: Strategy = {
      id: Date.now().toString(),
      name: `New ${selectedTemplate.name}`,
      description: selectedTemplate.description,
      type: selectedTemplate.type as any,
      status: 'inactive',
      symbols: ['BTCUSDT'],
      parameters: { ...selectedTemplate.defaultParameters, ...newStrategyParams },
      performance: {
        totalTrades: 0,
        winRate: 0,
        totalPnL: 0,
        maxDrawdown: 0,
        sharpeRatio: 0
      },
      riskManagement: {
        maxPositions: 5,
        maxRiskPerTrade: 2,
        stopLoss: 5,
        takeProfit: 3,
        dailyLossLimit: 500
      },
      createdAt: new Date().toISOString(),
      lastModified: new Date().toISOString()
    };

    setStrategies(prev => [newStrategy, ...prev]);
    setShowCreateModal(false);
    setSelectedTemplate(null);
    setNewStrategyParams({});
    setSelectedStrategy(newStrategy);
    setIsEditing(true);
  };

  const duplicateStrategy = (strategy: Strategy) => {
    const duplicated: Strategy = {
      ...strategy,
      id: Date.now().toString(),
      name: `${strategy.name} (Copy)`,
      status: 'inactive',
      createdAt: new Date().toISOString(),
      lastModified: new Date().toISOString()
    };

    setStrategies(prev => [duplicated, ...prev]);
  };

  const deleteStrategy = (id: string) => {
    if (window.confirm('Are you sure you want to delete this strategy?')) {
      setStrategies(prev => prev.filter(s => s.id !== id));
      if (selectedStrategy?.id === id) {
        setSelectedStrategy(null);
        setIsEditing(false);
      }
    }
  };

  const toggleStrategy = async (id: string) => {
    setStrategies(prev => prev.map(s =>
      s.id === id
        ? {
            ...s,
            status: s.status === 'active' ? 'inactive' : 'active',
            lastModified: new Date().toISOString()
          }
        : s
    ));
  };

  const saveStrategy = () => {
    if (!selectedStrategy) return;

    setStrategies(prev => prev.map(s =>
      s.id === selectedStrategy.id
        ? { ...selectedStrategy, lastModified: new Date().toISOString() }
        : s
    ));
    setIsEditing(false);
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active':
        return 'text-green-400 bg-green-900';
      case 'paused':
        return 'text-yellow-400 bg-yellow-900';
      case 'inactive':
      default:
        return 'text-gray-400 bg-gray-700';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'active':
        return <Play className="w-4 h-4" />;
      case 'paused':
        return <Pause className="w-4 h-4" />;
      case 'inactive':
      default:
        return <Clock className="w-4 h-4" />;
    }
  };

  const renderParameterInput = (key: string, definition: any, value: any, onChange: (key: string, value: any) => void) => {
    switch (definition.type) {
      case 'number':
        return (
          <input
            type="number"
            value={value}
            onChange={(e) => onChange(key, parseFloat(e.target.value) || 0)}
            min={definition.min}
            max={definition.max}
            step={definition.step || 1}
            className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        );
      case 'boolean':
        return (
          <input
            type="checkbox"
            checked={value}
            onChange={(e) => onChange(key, e.target.checked)}
            className="w-4 h-4 text-blue-600 bg-gray-700 border-gray-600 rounded focus:ring-blue-500"
          />
        );
      case 'select':
        return (
          <select
            value={value}
            onChange={(e) => onChange(key, e.target.value)}
            className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            {definition.options?.map((option: string) => (
              <option key={option} value={option}>
                {option}
              </option>
            ))}
          </select>
        );
      default:
        return (
          <input
            type="text"
            value={value}
            onChange={(e) => onChange(key, e.target.value)}
            className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        );
    }
  };

  return (
    <div className="p-6 bg-gray-900 text-white min-h-screen">
      {/* Header */}
      <div className="mb-8">
        <div className="flex items-center justify-between mb-6">
          <div>
            <h1 className="text-3xl font-bold mb-2">Strategy Builder</h1>
            <p className="text-gray-400">Create and manage your trading strategies</p>
          </div>

          <button
            onClick={() => setShowCreateModal(true)}
            className="flex items-center space-x-2 px-4 py-2 bg-blue-600 hover:bg-blue-700 rounded-lg transition-colors"
          >
            <Plus className="w-4 h-4" />
            <span>Create Strategy</span>
          </button>
        </div>

        {/* Statistics */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
          <div className="bg-gray-800 rounded-lg p-4 border border-gray-700">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-gray-400 text-sm">Total Strategies</p>
                <p className="text-2xl font-bold">{strategies.length}</p>
              </div>
              <BarChart3 className="w-6 h-6 text-blue-400" />
            </div>
          </div>

          <div className="bg-gray-800 rounded-lg p-4 border border-gray-700">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-gray-400 text-sm">Active</p>
                <p className="text-2xl font-bold text-green-400">
                  {strategies.filter(s => s.status === 'active').length}
                </p>
              </div>
              <Play className="w-6 h-6 text-green-400" />
            </div>
          </div>

          <div className="bg-gray-800 rounded-lg p-4 border border-gray-700">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-gray-400 text-sm">Total P&L</p>
                <p className="text-2xl font-bold text-green-400">
                  ${strategies.reduce((sum, s) => sum + s.performance.totalPnL, 0).toFixed(2)}
                </p>
              </div>
              <DollarSign className="w-6 h-6 text-green-400" />
            </div>
          </div>

          <div className="bg-gray-800 rounded-lg p-4 border border-gray-700">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-gray-400 text-sm">Avg Win Rate</p>
                <p className="text-2xl font-bold text-blue-400">
                  {strategies.length > 0
                    ? (strategies.reduce((sum, s) => sum + s.performance.winRate, 0) / strategies.length).toFixed(1)
                    : 0
                  }%
                </p>
              </div>
              <Target className="w-6 h-6 text-blue-400" />
            </div>
          </div>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Strategies List */}
        <div className="lg:col-span-1">
          <div className="bg-gray-800 rounded-lg border border-gray-700">
            <div className="p-4 border-b border-gray-700">
              <h3 className="text-lg font-semibold">Your Strategies</h3>
            </div>

            <div className="max-h-96 overflow-y-auto">
              {strategies.map(strategy => (
                <div
                  key={strategy.id}
                  className={`p-4 border-b border-gray-700 cursor-pointer hover:bg-gray-700 transition-colors ${
                    selectedStrategy?.id === strategy.id ? 'bg-gray-700 border-l-4 border-l-blue-500' : ''
                  }`}
                  onClick={() => {
                    setSelectedStrategy(strategy);
                    setIsEditing(false);
                  }}
                >
                  <div className="flex items-center justify-between mb-2">
                    <h4 className="font-semibold truncate">{strategy.name}</h4>
                    <div className="flex items-center space-x-2">
                      <span className={`px-2 py-1 rounded text-xs flex items-center space-x-1 ${getStatusColor(strategy.status)}`}>
                        {getStatusIcon(strategy.status)}
                        <span>{strategy.status}</span>
                      </span>
                    </div>
                  </div>

                  <p className="text-sm text-gray-400 mb-2 truncate">{strategy.description}</p>

                  <div className="flex items-center justify-between text-xs text-gray-500">
                    <span>{strategy.symbols.join(', ')}</span>
                    <span className={strategy.performance.totalPnL >= 0 ? 'text-green-400' : 'text-red-400'}>
                      ${strategy.performance.totalPnL.toFixed(2)}
                    </span>
                  </div>
                </div>
              ))}

              {strategies.length === 0 && (
                <div className="p-8 text-center text-gray-400">
                  <BarChart3 className="w-12 h-12 mx-auto mb-4 opacity-50" />
                  <p>No strategies created yet</p>
                  <p className="text-sm mt-2">Click "Create Strategy" to get started</p>
                </div>
              )}
            </div>
          </div>
        </div>

        {/* Strategy Details */}
        <div className="lg:col-span-2">
          {selectedStrategy ? (
            <div className="bg-gray-800 rounded-lg border border-gray-700">
              <div className="p-6 border-b border-gray-700">
                <div className="flex items-center justify-between mb-4">
                  <div className="flex items-center space-x-4">
                    <h3 className="text-xl font-semibold">{selectedStrategy.name}</h3>
                    <span className={`px-3 py-1 rounded flex items-center space-x-2 ${getStatusColor(selectedStrategy.status)}`}>
                      {getStatusIcon(selectedStrategy.status)}
                      <span>{selectedStrategy.status}</span>
                    </span>
                  </div>

                  <div className="flex items-center space-x-2">
                    <button
                      onClick={() => setIsEditing(!isEditing)}
                      className="p-2 bg-blue-600 hover:bg-blue-700 rounded-lg transition-colors"
                    >
                      <Edit className="w-4 h-4" />
                    </button>
                    <button
                      onClick={() => duplicateStrategy(selectedStrategy)}
                      className="p-2 bg-green-600 hover:bg-green-700 rounded-lg transition-colors"
                    >
                      <Copy className="w-4 h-4" />
                    </button>
                    <button
                      onClick={() => toggleStrategy(selectedStrategy.id)}
                      className={`p-2 rounded-lg transition-colors ${
                        selectedStrategy.status === 'active'
                          ? 'bg-red-600 hover:bg-red-700'
                          : 'bg-green-600 hover:bg-green-700'
                      }`}
                    >
                      {selectedStrategy.status === 'active' ? <Pause className="w-4 h-4" /> : <Play className="w-4 h-4" />}
                    </button>
                    <button
                      onClick={() => deleteStrategy(selectedStrategy.id)}
                      className="p-2 bg-red-600 hover:bg-red-700 rounded-lg transition-colors"
                    >
                      <Trash2 className="w-4 h-4" />
                    </button>
                  </div>
                </div>

                {isEditing && (
                  <div className="flex items-center space-x-2 mb-4">
                    <button
                      onClick={saveStrategy}
                      className="flex items-center space-x-2 px-4 py-2 bg-green-600 hover:bg-green-700 rounded-lg transition-colors"
                    >
                      <Save className="w-4 h-4" />
                      <span>Save Changes</span>
                    </button>
                    <button
                      onClick={() => setIsEditing(false)}
                      className="flex items-center space-x-2 px-4 py-2 bg-gray-600 hover:bg-gray-700 rounded-lg transition-colors"
                    >
                      <RotateCcw className="w-4 h-4" />
                      <span>Cancel</span>
                    </button>
                  </div>
                )}

                <p className="text-gray-400">{selectedStrategy.description}</p>
              </div>

              <div className="p-6 space-y-6">
                {/* Performance Metrics */}
                <div>
                  <h4 className="text-lg font-semibold mb-4">Performance</h4>
                  <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                    <div className="bg-gray-700 rounded-lg p-3">
                      <p className="text-gray-400 text-sm">Total Trades</p>
                      <p className="text-xl font-bold">{selectedStrategy.performance.totalTrades}</p>
                    </div>
                    <div className="bg-gray-700 rounded-lg p-3">
                      <p className="text-gray-400 text-sm">Win Rate</p>
                      <p className="text-xl font-bold text-green-400">{selectedStrategy.performance.winRate}%</p>
                    </div>
                    <div className="bg-gray-700 rounded-lg p-3">
                      <p className="text-gray-400 text-sm">Total P&L</p>
                      <p className={`text-xl font-bold ${selectedStrategy.performance.totalPnL >= 0 ? 'text-green-400' : 'text-red-400'}`}>
                        ${selectedStrategy.performance.totalPnL.toFixed(2)}
                      </p>
                    </div>
                    <div className="bg-gray-700 rounded-lg p-3">
                      <p className="text-gray-400 text-sm">Max Drawdown</p>
                      <p className="text-xl font-bold text-red-400">${Math.abs(selectedStrategy.performance.maxDrawdown).toFixed(2)}</p>
                    </div>
                    <div className="bg-gray-700 rounded-lg p-3">
                      <p className="text-gray-400 text-sm">Sharpe Ratio</p>
                      <p className="text-xl font-bold text-blue-400">{selectedStrategy.performance.sharpeRatio.toFixed(2)}</p>
                    </div>
                  </div>
                </div>

                {/* Strategy Parameters */}
                <div>
                  <h4 className="text-lg font-semibold mb-4">Parameters</h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {Object.entries(selectedStrategy.parameters).map(([key, value]) => (
                      <div key={key}>
                        <label className="block text-sm font-medium text-gray-300 mb-1 capitalize">
                          {key.replace(/([A-Z])/g, ' $1').trim()}
                        </label>
                        {isEditing ? (
                          <input
                            type={typeof value === 'number' ? 'number' : 'text'}
                            value={value}
                            onChange={(e) => {
                              const newValue = typeof value === 'number' ? parseFloat(e.target.value) || 0 : e.target.value;
                              setSelectedStrategy(prev => prev ? {
                                ...prev,
                                parameters: { ...prev.parameters, [key]: newValue }
                              } : null);
                            }}
                            className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                          />
                        ) : (
                          <div className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-gray-300">
                            {value.toString()}
                          </div>
                        )}
                      </div>
                    ))}
                  </div>
                </div>

                {/* Risk Management */}
                <div>
                  <h4 className="text-lg font-semibold mb-4">Risk Management</h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-300 mb-1">Max Positions</label>
                      <input
                        type="number"
                        value={selectedStrategy.riskManagement.maxPositions}
                        readOnly={!isEditing}
                        onChange={(e) => isEditing && setSelectedStrategy(prev => prev ? {
                          ...prev,
                          riskManagement: { ...prev.riskManagement, maxPositions: parseInt(e.target.value) || 0 }
                        } : null)}
                        className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-300 mb-1">Max Risk per Trade (%)</label>
                      <input
                        type="number"
                        value={selectedStrategy.riskManagement.maxRiskPerTrade}
                        readOnly={!isEditing}
                        step="0.1"
                        onChange={(e) => isEditing && setSelectedStrategy(prev => prev ? {
                          ...prev,
                          riskManagement: { ...prev.riskManagement, maxRiskPerTrade: parseFloat(e.target.value) || 0 }
                        } : null)}
                        className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-300 mb-1">Stop Loss (%)</label>
                      <input
                        type="number"
                        value={selectedStrategy.riskManagement.stopLoss}
                        readOnly={!isEditing}
                        step="0.1"
                        onChange={(e) => isEditing && setSelectedStrategy(prev => prev ? {
                          ...prev,
                          riskManagement: { ...prev.riskManagement, stopLoss: parseFloat(e.target.value) || 0 }
                        } : null)}
                        className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-300 mb-1">Take Profit (%)</label>
                      <input
                        type="number"
                        value={selectedStrategy.riskManagement.takeProfit}
                        readOnly={!isEditing}
                        step="0.1"
                        onChange={(e) => isEditing && setSelectedStrategy(prev => prev ? {
                          ...prev,
                          riskManagement: { ...prev.riskManagement, takeProfit: parseFloat(e.target.value) || 0 }
                        } : null)}
                        className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                      />
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ) : (
            <div className="bg-gray-800 rounded-lg border border-gray-700 p-12 text-center">
              <BarChart3 className="w-16 h-16 mx-auto mb-4 text-gray-600" />
              <h3 className="text-xl font-semibold mb-2">Select a Strategy</h3>
              <p className="text-gray-400">Choose a strategy from the list to view details and manage settings</p>
            </div>
          )}
        </div>
      </div>

      {/* Create Strategy Modal */}
      {showCreateModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-gray-800 rounded-lg p-6 w-full max-w-2xl max-h-90vh overflow-y-auto">
            <div className="flex items-center justify-between mb-6">
              <h3 className="text-xl font-semibold">Create New Strategy</h3>
              <button
                onClick={() => {
                  setShowCreateModal(false);
                  setSelectedTemplate(null);
                  setNewStrategyParams({});
                }}
                className="text-gray-400 hover:text-white"
              >
                <X className="w-6 h-6" />
              </button>
            </div>

            {!selectedTemplate ? (
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {strategyTemplates.map(template => (
                  <div
                    key={template.type}
                    onClick={() => setSelectedTemplate(template)}
                    className="p-4 border border-gray-600 rounded-lg hover:border-blue-500 cursor-pointer transition-colors"
                  >
                    <div className="flex items-center space-x-3 mb-3">
                      {template.icon}
                      <h4 className="font-semibold">{template.name}</h4>
                    </div>
                    <p className="text-sm text-gray-400">{template.description}</p>
                  </div>
                ))}
              </div>
            ) : (
              <div>
                <div className="mb-6">
                  <h4 className="text-lg font-semibold mb-2">{selectedTemplate.name} Configuration</h4>
                  <p className="text-gray-400">{selectedTemplate.description}</p>
                </div>

                <div className="space-y-4 mb-6">
                  {Object.entries(selectedTemplate.parameterDefinitions).map(([key, definition]) => (
                    <div key={key}>
                      <label className="block text-sm font-medium text-gray-300 mb-1">
                        {definition.label}
                      </label>
                      <p className="text-xs text-gray-400 mb-2">{definition.description}</p>
                      {renderParameterInput(
                        key,
                        definition,
                        newStrategyParams[key] ?? definition.default,
                        (paramKey, value) => setNewStrategyParams(prev => ({ ...prev, [paramKey]: value }))
                      )}
                    </div>
                  ))}
                </div>

                <div className="flex items-center space-x-4">
                  <button
                    onClick={createStrategy}
                    className="flex items-center space-x-2 px-4 py-2 bg-blue-600 hover:bg-blue-700 rounded-lg transition-colors"
                  >
                    <CheckCircle className="w-4 h-4" />
                    <span>Create Strategy</span>
                  </button>
                  <button
                    onClick={() => setSelectedTemplate(null)}
                    className="px-4 py-2 bg-gray-600 hover:bg-gray-700 rounded-lg transition-colors"
                  >
                    Back
                  </button>
                </div>
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  );
};

export default StrategyBuilderComponent;