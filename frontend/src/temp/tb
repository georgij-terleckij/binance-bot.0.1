import React, { useState, useEffect } from 'react';
import {
  Activity,
  TrendingUp,
  TrendingDown,
  DollarSign,
  Settings,
  BarChart3,
  Wallet,
  Bot,
  Play,
  Pause,
  RefreshCw,
  AlertTriangle,
  CheckCircle,
  XCircle,
  Loader2,
  Wifi,
  WifiOff
} from 'lucide-react';

// Импорт API сервиса (замените на ваш путь)
// import apiService, { useBotStatus, useSymbols, useOrders, useBalance } from './api/service';

// Mock данные для демонстрации (удалите в продакшене)
const mockUseBotStatus = () => {
  const [status, setStatus] = useState({
    isRunning: true,
    totalProfit: 1234.56,
    totalTrades: 142,
    winRate: 68.3,
    lastUpdate: new Date().toISOString()
  });

  const toggleBot = async () => {
    setStatus(prev => ({ ...prev, isRunning: !prev.isRunning }));
    return { message: 'Bot toggled' };
  };

  return { status, loading: false, error: null, toggleBot, refresh: () => {} };
};

const mockUseSymbols = () => {
  const [symbols, setSymbols] = useState([
    { symbol: 'BTCUSDT', price: '43,245.67', change: '+2.34%', volume: '1,234.56', status: 'active' as const, profit: '+$234.56', trades: 12 },
    { symbol: 'ETHUSDT', price: '2,567.89', change: '-1.23%', volume: '987.65', status: 'active' as const, profit: '+$123.45', trades: 8 },
    { symbol: 'ADAUSDT', price: '0.4523', change: '+0.87%', volume: '456.78', status: 'inactive' as const, profit: '-$45.23', trades: 3 }
  ]);

  const toggleSymbol = async (symbol: string) => {
    setSymbols(prev => prev.map(s =>
      s.symbol === symbol
        ? { ...s, status: s.status === 'active' ? 'inactive' : 'active' }
        : s
    ));
    return { message: 'Symbol toggled' };
  };

  return { symbols, loading: false, error: null, toggleSymbol, refresh: () => {} };
};

const mockUseOrders = () => {
  const orders = [
    { id: '1', symbol: 'BTCUSDT', side: 'BUY' as const, type: 'LIMIT', amount: '0.023', price: '43,200.00', status: 'FILLED', time: '2025-05-29 12:34:56' },
    { id: '2', symbol: 'ETHUSDT', side: 'SELL' as const, type: 'MARKET', amount: '1.45', price: '2,570.00', status: 'PENDING', time: '2025-05-29 12:30:12' }
  ];

  const cancelOrder = async (orderId: string) => {
    console.log('Cancel order:', orderId);
    return { message: 'Order cancelled' };
  };

  return { orders, loading: false, error: null, cancelOrder, refresh: () => {} };
};

const mockUseBalance = () => {
  const balance = [
    { asset: 'USDT', free: '1,234.56', locked: '234.56' },
    { asset: 'BTC', free: '0.12345678', locked: '0.00123456' },
    { asset: 'ETH', free: '2.345678', locked: '0.123456' }
  ];

  return { balance, loading: false, error: null, refresh: () => {} };
};

// Компонент для отображения статуса подключения
const ConnectionStatus = ({ isConnected }: { isConnected: boolean }) => (
  <div className={`flex items-center space-x-2 px-3 py-1 rounded-full text-sm ${
    isConnected ? 'bg-green-900 text-green-300' : 'bg-red-900 text-red-300'
  }`}>
    {isConnected ? <Wifi className="w-4 h-4" /> : <WifiOff className="w-4 h-4" />}
    <span>{isConnected ? 'Connected' : 'Disconnected'}</span>
  </div>
);

// Компонент для отображения загрузки
const LoadingSpinner = () => (
  <div className="flex items-center justify-center p-8">
    <Loader2 className="w-8 h-8 animate-spin text-blue-400" />
    <span className="ml-2 text-gray-400">Loading...</span>
  </div>
);

// Компонент для отображения ошибок
const ErrorMessage = ({ message, onRetry }: { message: string; onRetry?: () => void }) => (
  <div className="bg-red-900 border border-red-700 rounded-lg p-4 mb-4">
    <div className="flex items-center">
      <AlertTriangle className="w-5 h-5 text-red-400 mr-2" />
      <span className="text-red-200">{message}</span>
      {onRetry && (
        <button
          onClick={onRetry}
          className="ml-auto px-3 py-1 bg-red-700 hover:bg-red-600 rounded text-sm"
        >
          Retry
        </button>
      )}
    </div>
  </div>
);

const TradingBotUI = () => {
  // В продакшене используйте реальные хуки:
  // const { status: botStatus, loading: botLoading, error: botError, toggleBot } = useBotStatus();
  // const { symbols, loading: symbolsLoading, error: symbolsError, toggleSymbol, refresh: refreshSymbols } = useSymbols();
  // const { orders, loading: ordersLoading, error: ordersError, cancelOrder, refresh: refreshOrders } = useOrders();
  // const { balance, loading: balanceLoading, error: balanceError, refresh: refreshBalance } = useBalance();

  // Mock данные для демонстрации (удалите в продакшене)
  const { status: botStatus, loading: botLoading, error: botError, toggleBot } = mockUseBotStatus();
  const { symbols, loading: symbolsLoading, error: symbolsError, toggleSymbol, refresh: refreshSymbols } = mockUseSymbols();
  const { orders, loading: ordersLoading, error: ordersError, cancelOrder, refresh: refreshOrders } = mockUseOrders();
  const { balance, loading: balanceLoading, error: balanceError, refresh: refreshBalance } = mockUseBalance();

  const [selectedTab, setSelectedTab] = useState('overview');
  const [isConnected, setIsConnected] = useState(true);

  // Проверка подключения к API
  useEffect(() => {
    const checkConnection = async () => {
      try {
        // const response = await apiService.health();
        // setIsConnected(response.success);
        setIsConnected(true); // Mock для демонстрации
      } catch (error) {
        setIsConnected(false);
      }
    };

    checkConnection();
    const interval = setInterval(checkConnection, 30000); // Проверяем каждые 30 сек
    return () => clearInterval(interval);
  }, []);

  const handleBotToggle = async () => {
    try {
      await toggleBot();
      console.log('Bot toggled successfully');
    } catch (error) {
      console.error('Failed to toggle bot:', error);
    }
  };

  const handleSymbolToggle = async (symbol: string) => {
    try {
      await toggleSymbol(symbol);
      console.log(`Symbol ${symbol} toggled successfully`);
    } catch (error) {
      console.error(`Failed to toggle symbol ${symbol}:`, error);
    }
  };

  const handleOrderCancel = async (orderId: string) => {
    try {
      await cancelOrder(orderId);
      console.log(`Order ${orderId} cancelled successfully`);
    } catch (error) {
      console.error(`Failed to cancel order ${orderId}:`, error);
    }
  };

  const handleRefreshAll = () => {
    refreshSymbols();
    refreshOrders();
    refreshBalance();
  };

  return (
    <div className="min-h-screen bg-gray-900 text-white">
      {/* Header */}
      <header className="bg-gray-800 border-b border-gray-700 px-6 py-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <div className="flex items-center space-x-2">
              <Bot className="w-8 h-8 text-yellow-500" />
              <h1 className="text-2xl font-bold">Trading Bot</h1>
            </div>
            <ConnectionStatus isConnected={isConnected} />
          </div>

          <div className="flex items-center space-x-4">
            <button
              onClick={handleBotToggle}
              disabled={botLoading || !isConnected}
              className={`flex items-center space-x-2 px-4 py-2 rounded-lg font-semibold transition-colors disabled:opacity-50 disabled:cursor-not-allowed ${
                botStatus?.isRunning
                  ? 'bg-red-600 hover:bg-red-700 text-white'
                  : 'bg-green-600 hover:bg-green-700 text-white'
              }`}
            >
              {botLoading ? (
                <Loader2 className="w-4 h-4 animate-spin" />
              ) : botStatus?.isRunning ? (
                <Pause className="w-4 h-4" />
              ) : (
                <Play className="w-4 h-4" />
              )}
              <span>
                {botLoading ? 'Loading...' : botStatus?.isRunning ? 'Stop Bot' : 'Start Bot'}
              </span>
            </button>

            <button
              onClick={handleRefreshAll}
              className="p-2 text-gray-400 hover:text-white hover:bg-gray-700 rounded-lg transition-colors"
              title="Refresh all data"
            >
              <RefreshCw className="w-5 h-5" />
            </button>

            <button className="p-2 text-gray-400 hover:text-white hover:bg-gray-700 rounded-lg transition-colors">
              <Settings className="w-5 h-5" />
            </button>
          </div>
        </div>
      </header>

      {/* Error Messages */}
      <div className="px-6 pt-4">
        {botError && <ErrorMessage message={`Bot Error: ${botError}`} />}
        {symbolsError && <ErrorMessage message={`Symbols Error: ${symbolsError}`} />}
        {ordersError && <ErrorMessage message={`Orders Error: ${ordersError}`} />}
        {balanceError && <ErrorMessage message={`Balance Error: ${balanceError}`} />}
      </div>

      {/* Navigation Tabs */}
      <nav className="bg-gray-800 border-b border-gray-700 px-6">
        <div className="flex space-x-8">
          {[
            { id: 'overview', label: 'Overview', icon: BarChart3 },
            { id: 'symbols', label: 'Symbols', icon: TrendingUp },
            { id: 'orders', label: 'Orders', icon: Activity },
            { id: 'balance', label: 'Balance', icon: Wallet }
          ].map(tab => (
            <button
              key={tab.id}
              onClick={() => setSelectedTab(tab.id)}
              className={`flex items-center space-x-2 px-4 py-4 border-b-2 transition-colors ${
                selectedTab === tab.id
                  ? 'border-yellow-500 text-yellow-500'
                  : 'border-transparent text-gray-400 hover:text-white'
              }`}
            >
              <tab.icon className="w-4 h-4" />
              <span>{tab.label}</span>
            </button>
          ))}
        </div>
      </nav>

      <main className="p-6">
        {selectedTab === 'overview' && (
          <div className="space-y-6">
            {/* Stats Cards */}
            {botLoading ? (
              <LoadingSpinner />
            ) : (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-gray-400 text-sm">Total Profit</p>
                      <p className={`text-2xl font-bold ${(botStatus?.totalProfit ?? 0) >= 0 ? 'text-green-400' : 'text-red-400'}`}>
                        ${botStatus?.totalProfit?.toFixed(2) ?? '0.00'}
                      </p>
                    </div>
                    <DollarSign className="w-8 h-8 text-green-400" />
                  </div>
                </div>

                <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-gray-400 text-sm">Total Trades</p>
                      <p className="text-2xl font-bold">{botStatus?.totalTrades ?? 0}</p>
                    </div>
                    <Activity className="w-8 h-8 text-blue-400" />
                  </div>
                </div>

                <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-gray-400 text-sm">Win Rate</p>
                      <p className="text-2xl font-bold text-green-400">{botStatus?.winRate ?? 0}%</p>
                    </div>
                    <TrendingUp className="w-8 h-8 text-green-400" />
                  </div>
                </div>

                <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-gray-400 text-sm">Bot Status</p>
                      <p className={`text-2xl font-bold ${botStatus?.isRunning ? 'text-green-400' : 'text-red-400'}`}>
                        {botStatus?.isRunning ? 'Running' : 'Stopped'}
                      </p>
                    </div>
                    {botStatus?.isRunning ?
                      <CheckCircle className="w-8 h-8 text-green-400" /> :
                      <XCircle className="w-8 h-8 text-red-400" />
                    }
                  </div>
                </div>
              </div>
            )}

            {/* Active Symbols Summary */}
            <div className="bg-gray-800 rounded-lg border border-gray-700">
              <div className="p-6 border-b border-gray-700">
                <h2 className="text-xl font-semibold">Active Trading Pairs</h2>
              </div>
              <div className="p-6">
                {symbolsLoading ? (
                  <LoadingSpinner />
                ) : (
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    {symbols.filter(s => s.status === 'active').map(symbol => (
                      <div key={symbol.symbol} className="bg-gray-700 rounded-lg p-4">
                        <div className="flex items-center justify-between mb-2">
                          <span className="font-semibold">{symbol.symbol}</span>
                          <span className={`text-sm ${symbol.change.startsWith('+') ? 'text-green-400' : 'text-red-400'}`}>
                            {symbol.change}
                          </span>
                        </div>
                        <div className="text-2xl font-bold mb-1">${symbol.price}</div>
                        <div className="flex justify-between text-sm text-gray-400">
                          <span>Trades: {symbol.trades}</span>
                          <span className={symbol.profit.startsWith('+') ? 'text-green-400' : 'text-red-400'}>
                            {symbol.profit}
                          </span>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </div>
          </div>
        )}

        {selectedTab === 'symbols' && (
          <div className="bg-gray-800 rounded-lg border border-gray-700">
            <div className="p-6 border-b border-gray-700">
              <div className="flex items-center justify-between">
                <h2 className="text-xl font-semibold">Trading Symbols</h2>
                <button
                  onClick={refreshSymbols}
                  disabled={symbolsLoading}
                  className="flex items-center space-x-2 px-4 py-2 bg-blue-600 hover:bg-blue-700 disabled:opacity-50 rounded-lg transition-colors"
                >
                  <RefreshCw className={`w-4 h-4 ${symbolsLoading ? 'animate-spin' : ''}`} />
                  <span>Refresh</span>
                </button>
              </div>
            </div>
            {symbolsLoading ? (
              <LoadingSpinner />
            ) : (
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead>
                    <tr className="border-b border-gray-700">
                      <th className="text-left py-4 px-6">Symbol</th>
                      <th className="text-left py-4 px-6">Price</th>
                      <th className="text-left py-4 px-6">24h Change</th>
                      <th className="text-left py-4 px-6">Volume</th>
                      <th className="text-left py-4 px-6">Trades</th>
                      <th className="text-left py-4 px-6">Profit</th>
                      <th className="text-left py-4 px-6">Status</th>
                      <th className="text-left py-4 px-6">Actions</th>
                    </tr>
                  </thead>
                  <tbody>
                    {symbols.map(symbol => (
                      <tr key={symbol.symbol} className="border-b border-gray-700 hover:bg-gray-700">
                        <td className="py-4 px-6">
                          <span className="font-semibold">{symbol.symbol}</span>
                        </td>
                        <td className="py-4 px-6 font-mono">${symbol.price}</td>
                        <td className={`py-4 px-6 ${symbol.change.startsWith('+') ? 'text-green-400' : 'text-red-400'}`}>
                          {symbol.change}
                        </td>
                        <td className="py-4 px-6">{symbol.volume}</td>
                        <td className="py-4 px-6">{symbol.trades}</td>
                        <td className={`py-4 px-6 ${symbol.profit.startsWith('+') ? 'text-green-400' : 'text-red-400'}`}>
                          {symbol.profit}
                        </td>
                        <td className="py-4 px-6">
                          <span className={`px-2 py-1 rounded-full text-xs ${
                            symbol.status === 'active'
                              ? 'bg-green-900 text-green-300'
                              : 'bg-gray-600 text-gray-300'
                          }`}>
                            {symbol.status.toUpperCase()}
                          </span>
                        </td>
                        <td className="py-4 px-6">
                          <button
                            onClick={() => handleSymbolToggle(symbol.symbol)}
                            disabled={!isConnected}
                            className={`px-3 py-1 rounded text-sm transition-colors disabled:opacity-50 ${
                              symbol.status === 'active'
                                ? 'bg-red-600 hover:bg-red-700'
                                : 'bg-green-600 hover:bg-green-700'
                            }`}
                          >
                            {symbol.status === 'active' ? 'Stop' : 'Start'}
                          </button>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            )}
          </div>
        )}

        {selectedTab === 'orders' && (
          <div className="bg-gray-800 rounded-lg border border-gray-700">
            <div className="p-6 border-b border-gray-700">
              <div className="flex items-center justify-between">
                <h2 className="text-xl font-semibold">Recent Orders</h2>
                <button
                  onClick={refreshOrders}
                  disabled={ordersLoading}
                  className="flex items-center space-x-2 px-4 py-2 bg-blue-600 hover:bg-blue-700 disabled:opacity-50 rounded-lg transition-colors"
                >
                  <RefreshCw className={`w-4 h-4 ${ordersLoading ? 'animate-spin' : ''}`} />
                  <span>Refresh</span>
                </button>
              </div>
            </div>
            {ordersLoading ? (
              <LoadingSpinner />
            ) : (
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead>
                    <tr className="border-b border-gray-700">
                      <th className="text-left py-4 px-6">Symbol</th>
                      <th className="text-left py-4 px-6">Side</th>
                      <th className="text-left py-4 px-6">Type</th>
                      <th className="text-left py-4 px-6">Amount</th>
                      <th className="text-left py-4 px-6">Price</th>
                      <th className="text-left py-4 px-6">Status</th>
                      <th className="text-left py-4 px-6">Time</th>
                      <th className="text-left py-4 px-6">Actions</th>
                    </tr>
                  </thead>
                  <tbody>
                    {orders.map(order => (
                      <tr key={order.id} className="border-b border-gray-700 hover:bg-gray-700">
                        <td className="py-4 px-6 font-semibold">{order.symbol}</td>
                        <td className={`py-4 px-6 ${order.side === 'BUY' ? 'text-green-400' : 'text-red-400'}`}>
                          {order.side}
                        </td>
                        <td className="py-4 px-6">{order.type}</td>
                        <td className="py-4 px-6 font-mono">{order.amount}</td>
                        <td className="py-4 px-6 font-mono">${order.price}</td>
                        <td className="py-4 px-6">
                          <span className={`px-2 py-1 rounded-full text-xs ${
                            order.status === 'FILLED' ? 'bg-green-900 text-green-300' :
                            order.status === 'PENDING' ? 'bg-yellow-900 text-yellow-300' :
                            'bg-red-900 text-red-300'
                          }`}>
                            {order.status}
                          </span>
                        </td>
                        <td className="py-4 px-6 text-gray-400 text-sm">{order.time}</td>
                        <td className="py-4 px-6">
                          {order.status === 'PENDING' && (
                            <button
                              onClick={() => handleOrderCancel(order.id)}
                              className="px-3 py-1 bg-red-600 hover:bg-red-700 rounded text-sm transition-colors"
                            >
                              Cancel
                            </button>
                          )}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            )}
          </div>
        )}

        {selectedTab === 'balance' && (
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <div className="bg-gray-800 rounded-lg border border-gray-700">
              <div className="p-6 border-b border-gray-700">
                <div className="flex items-center justify-between">
                  <h2 className="text-xl font-semibold">Account Balance</h2>
                  <button
                    onClick={refreshBalance}
                    disabled={balanceLoading}
                    className="p-2 text-gray-400 hover:text-white hover:bg-gray-700 rounded-lg transition-colors"
                  >
                    <RefreshCw className={`w-4 h-4 ${balanceLoading ? 'animate-spin' : ''}`} />
                  </button>
                </div>
              </div>
              <div className="p-6">
                {balanceLoading ? (
                  <LoadingSpinner />
                ) : (
                  <div className="space-y-4">
                    {balance.map(bal => (
                      <div key={bal.asset} className="flex items-center justify-between p-4 bg-gray-700 rounded-lg">
                        <div className="flex items-center space-x-3">
                          <div className="w-8 h-8 bg-yellow-500 rounded-full flex items-center justify-center text-black font-bold text-sm">
                            {bal.asset[0]}
                          </div>
                          <span className="font-semibold">{bal.asset}</span>
                        </div>
                        <div className="text-right">
                          <div className="font-mono">{bal.free}</div>
                          <div className="text-sm text-gray-400">Locked: {bal.locked}</div>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </div>

            <div className="bg-gray-800 rounded-lg border border-gray-700">
              <div className="p-6 border-b border-gray-700">
                <h2 className="text-xl font-semibold">Performance</h2>
              </div>
              <div className="p-6 space-y-4">
                <div className="flex justify-between items-center">
                  <span className="text-gray-400">Today's PnL</span>
                  <span className="text-green-400 font-semibold">+$45.67</span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-gray-400">Weekly PnL</span>
                  <span className="text-green-400 font-semibold">+$234.56</span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-gray-400">Monthly PnL</span>
                  <span className="text-green-400 font-semibold">+$1,234.56</span>
                </div>
                <div className="border-t border-gray-700 pt-4">
                  <div className="flex justify-between items-center">
                    <span className="text-gray-400">Total Portfolio</span>
                    <span className="text-white font-bold text-lg">$12,345.67</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
      </main>

      {/* Footer */}
      <footer className="bg-gray-800 border-t border-gray-700 px-6 py-4 mt-auto">
        <div className="flex items-center justify-between text-sm text-gray-400">
          <div>
            Last updated: {botStatus?.lastUpdate ? new Date(botStatus.lastUpdate).toLocaleString() : 'Never'}
          </div>
          <div className="flex items-center space-x-4">
            <span>API Status: {isConnected ? 'Active' : 'Disconnected'}</span>
            <span>Version 1.0.0</span>
          </div>
        </div>
      </footer>
    </div>
  );
};

export default TradingBotUI;



// api/service.ts
const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';

interface ApiResponse<T> {
  success: boolean;
  data?: T;
  error?: string;
}

interface BotStatus {
  isRunning: boolean;
  totalProfit: number;
  totalTrades: number;
  winRate: number;
  lastUpdate: string;
}

interface Symbol {
  symbol: string;
  price: string;
  change: string;
  volume: string;
  status: 'active' | 'inactive';
  profit: string;
  trades: number;
}

interface Order {
  id: string;
  symbol: string;
  side: 'BUY' | 'SELL';
  type: string;
  amount: string;
  price: string;
  status: string;
  time: string;
}

interface Balance {
  asset: string;
  free: string;
  locked: string;
}

class ApiService {
  private async request<T>(endpoint: string, options?: RequestInit): Promise<ApiResponse<T>> {
    try {
      const response = await fetch(`${API_BASE_URL}${endpoint}`, {
        headers: {
          'Content-Type': 'application/json',
          ...options?.headers,
        },
        ...options,
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      return { success: true, data };
    } catch (error) {
      console.error(`API Error (${endpoint}):`, error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  // Bot Management
  async getBotStatus(): Promise<ApiResponse<BotStatus>> {
    return this.request<BotStatus>('/api/bot/status');
  }

  async startBot(): Promise<ApiResponse<{ message: string }>> {
    return this.request('/api/bot/start', { method: 'POST' });
  }

  async stopBot(): Promise<ApiResponse<{ message: string }>> {
    return this.request('/api/bot/stop', { method: 'POST' });
  }

  async toggleBot(): Promise<ApiResponse<{ message: string }>> {
    return this.request('/api/bot/toggle', { method: 'POST' });
  }

  // Symbols Management
  async getSymbols(): Promise<ApiResponse<Symbol[]>> {
    return this.request<Symbol[]>('/api/symbols');
  }

  async getSymbolPrice(symbol: string): Promise<ApiResponse<{ price: string }>> {
    return this.request<{ price: string }>(`/api/symbols/${symbol}/price`);
  }

  async toggleSymbol(symbol: string): Promise<ApiResponse<{ message: string }>> {
    return this.request(`/api/symbols/${symbol}/toggle`, { method: 'POST' });
  }

  async startSymbolTrading(symbol: string): Promise<ApiResponse<{ message: string }>> {
    return this.request(`/api/symbols/${symbol}/start`, { method: 'POST' });
  }

  async stopSymbolTrading(symbol: string): Promise<ApiResponse<{ message: string }>> {
    return this.request(`/api/symbols/${symbol}/stop`, { method: 'POST' });
  }

  // Orders Management
  async getOrders(symbol?: string, limit: number = 50): Promise<ApiResponse<Order[]>> {
    const params = new URLSearchParams();
    if (symbol) params.append('symbol', symbol);
    params.append('limit', limit.toString());

    return this.request<Order[]>(`/api/orders?${params}`);
  }

  async getOrder(orderId: string): Promise<ApiResponse<Order>> {
    return this.request<Order>(`/api/orders/${orderId}`);
  }

  async cancelOrder(orderId: string): Promise<ApiResponse<{ message: string }>> {
    return this.request(`/api/orders/${orderId}/cancel`, { method: 'DELETE' });
  }

  // Balance & Account
  async getBalance(): Promise<ApiResponse<Balance[]>> {
    return this.request<Balance[]>('/api/account/balance');
  }

  async getAccountInfo(): Promise<ApiResponse<any>> {
    return this.request('/api/account/info');
  }

  // Statistics & Performance
  async getStats(): Promise<ApiResponse<any>> {
    return this.request('/api/stats');
  }

  async getProfitLoss(period: 'day' | 'week' | 'month' = 'day'): Promise<ApiResponse<any>> {
    return this.request(`/api/stats/pnl?period=${period}`);
  }

  // Grid Trading
  async getGridStatus(symbol: string): Promise<ApiResponse<any>> {
    return this.request(`/api/grid-trade/status?symbol=${symbol}`);
  }

  async getGrid(symbol: string): Promise<ApiResponse<any>> {
    return this.request(`/api/grid-trade?symbol=${symbol}`);
  }

  async createGrid(symbol: string, levels: any[]): Promise<ApiResponse<any>> {
    return this.request('/api/grid-trade', {
      method: 'POST',
      body: JSON.stringify({ symbol, levels })
    });
  }

  async startGrid(symbol: string): Promise<ApiResponse<any>> {
    return this.request(`/api/grid-trade/start?symbol=${symbol}`, { method: 'POST' });
  }

  async stopGrid(symbol: string): Promise<ApiResponse<any>> {
    return this.request(`/api/grid-trade/stop?symbol=${symbol}`, { method: 'POST' });
  }

  // Settings & Configuration
  async getSettings(): Promise<ApiResponse<any>> {
    return this.request('/api/settings');
  }

  async updateSettings(settings: any): Promise<ApiResponse<any>> {
    return this.request('/api/settings', {
      method: 'PUT',
      body: JSON.stringify(settings)
    });
  }

  // WebSocket URL for real-time updates
  getWebSocketUrl(): string {
    return `${API_BASE_URL.replace('http', 'ws')}/ws`;
  }

  // Health check
  async health(): Promise<ApiResponse<{ status: string }>> {
    return this.request('/health');
  }
}

// Singleton instance
const apiService = new ApiService();
export default apiService;

// Utility hook for API calls with loading states
export function useApi() {
  const [loading, setLoading] = React.useState(false);
  const [error, setError] = React.useState<string | null>(null);

  const callApi = async <T>(apiCall: () => Promise<ApiResponse<T>>): Promise<T | null> => {
    setLoading(true);
    setError(null);

    try {
      const response = await apiCall();

      if (response.success && response.data) {
        return response.data;
      } else {
        setError(response.error || 'Unknown error');
        return null;
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Unknown error');
      return null;
    } finally {
      setLoading(false);
    }
  };

  return { callApi, loading, error, clearError: () => setError(null) };
}

// React hooks for common API operations
export function useBotStatus() {
  const [status, setStatus] = React.useState<BotStatus | null>(null);
  const { callApi, loading, error } = useApi();

  const fetchStatus = React.useCallback(async () => {
    const data = await callApi(() => apiService.getBotStatus());
    if (data) setStatus(data);
  }, [callApi]);

  const toggleBot = React.useCallback(async () => {
    const data = await callApi(() => apiService.toggleBot());
    if (data) await fetchStatus(); // Refresh status after toggle
    return data;
  }, [callApi, fetchStatus]);

  React.useEffect(() => {
    fetchStatus();

    // Refresh every 30 seconds
    const interval = setInterval(fetchStatus, 30000);
    return () => clearInterval(interval);
  }, [fetchStatus]);

  return { status, loading, error, toggleBot, refresh: fetchStatus };
}

export function useSymbols() {
  const [symbols, setSymbols] = React.useState<Symbol[]>([]);
  const { callApi, loading, error } = useApi();

  const fetchSymbols = React.useCallback(async () => {
    const data = await callApi(() => apiService.getSymbols());
    if (data) setSymbols(data);
  }, [callApi]);

  const toggleSymbol = React.useCallback(async (symbol: string) => {
    const data = await callApi(() => apiService.toggleSymbol(symbol));
    if (data) await fetchSymbols(); // Refresh after toggle
    return data;
  }, [callApi, fetchSymbols]);

  React.useEffect(() => {
    fetchSymbols();
  }, [fetchSymbols]);

  return { symbols, loading, error, toggleSymbol, refresh: fetchSymbols };
}

export function useOrders(symbol?: string) {
  const [orders, setOrders] = React.useState<Order[]>([]);
  const { callApi, loading, error } = useApi();

  const fetchOrders = React.useCallback(async () => {
    const data = await callApi(() => apiService.getOrders(symbol));
    if (data) setOrders(data);
  }, [callApi, symbol]);

  const cancelOrder = React.useCallback(async (orderId: string) => {
    const data = await callApi(() => apiService.cancelOrder(orderId));
    if (data) await fetchOrders(); // Refresh after cancel
    return data;
  }, [callApi, fetchOrders]);

  React.useEffect(() => {
    fetchOrders();
  }, [fetchOrders]);

  return { orders, loading, error, cancelOrder, refresh: fetchOrders };
}

export function useBalance() {
  const [balance, setBalance] = React.useState<Balance[]>([]);
  const { callApi, loading, error } = useApi();

  const fetchBalance = React.useCallback(async () => {
    const data = await callApi(() => apiService.getBalance());
    if (data) setBalance(data);
  }, [callApi]);

  React.useEffect(() => {
    fetchBalance();
  }, [fetchBalance]);

  return { balance, loading, error, refresh: fetchBalance };
}