import React, { useState, useEffect, useMemo } from 'react';
import {
  LineChart,
  Line,
  AreaChart,
  Area,
  BarChart,
  Bar,
  PieChart,
  Pie,
  Cell,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer
} from 'recharts';
import {
  TrendingUp,
  TrendingDown,
  DollarSign,
  BarChart3,
  PieChart as PieChartIcon,
  Calendar,
  Download,
  RefreshCw,
  Target,
  Award,
  AlertTriangle
} from 'lucide-react';

interface PnLData {
  date: string;
  pnl: number;
  cumulativePnl: number;
  trades: number;
}

interface SymbolPerformance {
  symbol: string;
  trades: number;
  pnl: number;
  winRate: number;
  avgProfit: number;
  volume: number;
}

interface HourlyData {
  hour: number;
  trades: number;
  pnl: number;
  volume: number;
}

interface StrategyPerformance {
  strategy: string;
  trades: number;
  pnl: number;
  winRate: number;
  avgReturn: number;
}

// Mock data
const mockPnLData: PnLData[] = [
  { date: '2025-05-20', pnl: 45.67, cumulativePnl: 45.67, trades: 12 },
  { date: '2025-05-21', pnl: -23.45, cumulativePnl: 22.22, trades: 8 },
  { date: '2025-05-22', pnl: 78.90, cumulativePnl: 101.12, trades: 15 },
  { date: '2025-05-23', pnl: 34.56, cumulativePnl: 135.68, trades: 10 },
  { date: '2025-05-24', pnl: -12.34, cumulativePnl: 123.34, trades: 6 },
  { date: '2025-05-25', pnl: 56.78, cumulativePnl: 180.12, trades: 14 },
  { date: '2025-05-26', pnl: 89.01, cumulativePnl: 269.13, trades: 18 },
  { date: '2025-05-27', pnl: -45.67, cumulativePnl: 223.46, trades: 7 },
  { date: '2025-05-28', pnl: 67.89, cumulativePnl: 291.35, trades: 11 },
  { date: '2025-05-29', pnl: 123.45, cumulativePnl: 414.80, trades: 20 }
];

const mockSymbolPerformance: SymbolPerformance[] = [
  { symbol: 'BTCUSDT', trades: 45, pnl: 234.56, winRate: 68.9, avgProfit: 5.21, volume: 12345.67 },
  { symbol: 'ETHUSDT', trades: 32, pnl: 156.78, winRate: 62.5, avgProfit: 4.90, volume: 8765.43 },
  { symbol: 'ADAUSDT', trades: 28, pnl: -45.23, winRate: 39.3, avgProfit: -1.61, volume: 5432.10 },
  { symbol: 'BNBUSDT', trades: 19, pnl: 78.90, winRate: 73.7, avgProfit: 4.15, volume: 3210.98 },
  { symbol: 'SOLUSDT', trades: 15, pnl: 23.45, winRate: 60.0, avgProfit: 1.56, volume: 2109.87 }
];

const mockHourlyData: HourlyData[] = Array.from({ length: 24 }, (_, i) => ({
  hour: i,
  trades: Math.floor(Math.random() * 20) + 1,
  pnl: (Math.random() - 0.5) * 100,
  volume: Math.random() * 1000 + 100
}));

const mockStrategyPerformance: StrategyPerformance[] = [
  { strategy: 'Grid Trading', trades: 78, pnl: 345.67, winRate: 71.8, avgReturn: 4.43 },
  { strategy: 'DCA', trades: 34, pnl: 123.45, winRate: 64.7, avgReturn: 3.63 },
  { strategy: 'Scalping', trades: 56, pnl: -23.45, winRate: 48.2, avgReturn: -0.42 },
  { strategy: 'Arbitrage', trades: 12, pnl: 67.89, winRate: 83.3, avgReturn: 5.66 }
];

const TradingAnalyticsComponent = () => {
  const [timeRange, setTimeRange] = useState<'7d' | '30d' | '90d' | '1y'>('30d');
  const [selectedMetric, setSelectedMetric] = useState<'pnl' | 'trades' | 'volume'>('pnl');
  const [isLoading, setIsLoading] = useState(false);

  // Calculated metrics
  const analytics = useMemo(() => {
    const totalPnL = mockPnLData.reduce((sum, day) => sum + day.pnl, 0);
    const totalTrades = mockPnLData.reduce((sum, day) => sum + day.trades, 0);
    const winningDays = mockPnLData.filter(day => day.pnl > 0).length;
    const avgDailyPnL = totalPnL / mockPnLData.length;
    const maxDrawdown = Math.min(...mockPnLData.map(day => day.pnl));
    const maxProfit = Math.max(...mockPnLData.map(day => day.pnl));
    const winRate = (winningDays / mockPnLData.length) * 100;
    const sharpeRatio = 2.34; // Mock calculation
    const volatility = 15.67; // Mock calculation

    return {
      totalPnL,
      totalTrades,
      avgDailyPnL,
      maxDrawdown,
      maxProfit,
      winRate,
      sharpeRatio,
      volatility
    };
  }, []);

  const refreshData = async () => {
    setIsLoading(true);
    try {
      // В реальном приложении:
      // await apiService.getAnalytics(timeRange);
      setTimeout(() => setIsLoading(false), 1000);
    } catch (error) {
      console.error('Failed to refresh analytics:', error);
      setIsLoading(false);
    }
  };

  const exportData = () => {
    const csvContent = 'Date,PnL,Cumulative PnL,Trades\n' +
      mockPnLData.map(day => `${day.date},${day.pnl},${day.cumulativePnl},${day.trades}`).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `analytics_${timeRange}_${new Date().toISOString().split('T')[0]}.csv`;
    a.click();
    window.URL.revokeObjectURL(url);
  };

  const COLORS = ['#3B82F6', '#10B981', '#F59E0B', '#EF4444', '#8B5CF6', '#EC4899'];

  return (
    <div className="p-6 bg-gray-900 text-white min-h-screen">
      {/* Header */}
      <div className="mb-8">
        <div className="flex items-center justify-between mb-6">
          <div>
            <h1 className="text-3xl font-bold mb-2">Trading Analytics</h1>
            <p className="text-gray-400">Comprehensive analysis of your trading performance</p>
          </div>

          <div className="flex items-center space-x-4">
            {/* Time Range Selector */}
            <div className="flex bg-gray-800 rounded-lg p-1">
              {[
                { value: '7d', label: '7D' },
                { value: '30d', label: '30D' },
                { value: '90d', label: '90D' },
                { value: '1y', label: '1Y' }
              ].map(option => (
                <button
                  key={option.value}
                  onClick={() => setTimeRange(option.value as any)}
                  className={`px-3 py-1 rounded text-sm transition-colors ${
                    timeRange === option.value
                      ? 'bg-blue-600 text-white'
                      : 'text-gray-400 hover:text-white'
                  }`}
                >
                  {option.label}
                </button>
              ))}
            </div>

            <button
              onClick={refreshData}
              disabled={isLoading}
              className="flex items-center space-x-2 px-4 py-2 bg-blue-600 hover:bg-blue-700 disabled:opacity-50 rounded-lg transition-colors"
            >
              <RefreshCw className={`w-4 h-4 ${isLoading ? 'animate-spin' : ''}`} />
              <span>Refresh</span>
            </button>

            <button
              onClick={exportData}
              className="flex items-center space-x-2 px-4 py-2 bg-green-600 hover:bg-green-700 rounded-lg transition-colors"
            >
              <Download className="w-4 h-4" />
              <span>Export</span>
            </button>
          </div>
        </div>

        {/* Key Metrics */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
            <div className="flex items-center justify-between mb-2">
              <h3 className="text-gray-400 text-sm">Total P&L</h3>
              <DollarSign className="w-5 h-5 text-green-400" />
            </div>
            <p className={`text-2xl font-bold ${analytics.totalPnL >= 0 ? 'text-green-400' : 'text-red-400'}`}>
              ${analytics.totalPnL.toFixed(2)}
            </p>
            <p className="text-xs text-gray-500 mt-1">
              Last {timeRange}: {analytics.avgDailyPnL >= 0 ? '+' : ''}${analytics.avgDailyPnL.toFixed(2)}/day avg
            </p>
          </div>

          <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
            <div className="flex items-center justify-between mb-2">
              <h3 className="text-gray-400 text-sm">Win Rate</h3>
              <Target className="w-5 h-5 text-blue-400" />
            </div>
            <p className="text-2xl font-bold text-blue-400">{analytics.winRate.toFixed(1)}%</p>
            <p className="text-xs text-gray-500 mt-1">
              {mockPnLData.filter(d => d.pnl > 0).length} winning days
            </p>
          </div>

          <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
            <div className="flex items-center justify-between mb-2">
              <h3 className="text-gray-400 text-sm">Sharpe Ratio</h3>
              <Award className="w-5 h-5 text-yellow-400" />
            </div>
            <p className="text-2xl font-bold text-yellow-400">{analytics.sharpeRatio}</p>
            <p className="text-xs text-gray-500 mt-1">
              Risk-adjusted return
            </p>
          </div>

          <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
            <div className="flex items-center justify-between mb-2">
              <h3 className="text-gray-400 text-sm">Max Drawdown</h3>
              <AlertTriangle className="w-5 h-5 text-red-400" />
            </div>
            <p className="text-2xl font-bold text-red-400">${Math.abs(analytics.maxDrawdown).toFixed(2)}</p>
            <p className="text-xs text-gray-500 mt-1">
              Largest single day loss
            </p>
          </div>
        </div>
      </div>

      {/* Charts Grid */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
        {/* P&L Chart */}
        <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-semibold">P&L Over Time</h3>
            <div className="flex space-x-2">
              <button
                onClick={() => setSelectedMetric('pnl')}
                className={`px-3 py-1 rounded text-sm ${
                  selectedMetric === 'pnl' ? 'bg-blue-600' : 'bg-gray-700'
                }`}
              >
                P&L
              </button>
              <button
                onClick={() => setSelectedMetric('trades')}
                className={`px-3 py-1 rounded text-sm ${
                  selectedMetric === 'trades' ? 'bg-blue-600' : 'bg-gray-700'
                }`}
              >
                Trades
              </button>
            </div>
          </div>

          <ResponsiveContainer width="100%" height={300}>
            <AreaChart data={mockPnLData}>
              <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
              <XAxis
                dataKey="date"
                stroke="#9CA3AF"
                fontSize={12}
                tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}
              />
              <YAxis stroke="#9CA3AF" fontSize={12} />
              <Tooltip
                contentStyle={{
                  backgroundColor: '#1F2937',
                  border: '1px solid #374151',
                  borderRadius: '8px'
                }}
                labelStyle={{ color: '#F9FAFB' }}
              />
              <Area
                type="monotone"
                dataKey={selectedMetric === 'pnl' ? 'cumulativePnl' : 'trades'}
                stroke="#3B82F6"
                fill="#3B82F6"
                fillOpacity={0.3}
              />
            </AreaChart>
          </ResponsiveContainer>
        </div>

        {/* Symbol Performance */}
        <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
          <h3 className="text-lg font-semibold mb-4">Symbol Performance</h3>

          <ResponsiveContainer width="100%" height={300}>
            <BarChart data={mockSymbolPerformance}>
              <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
              <XAxis dataKey="symbol" stroke="#9CA3AF" fontSize={12} />
              <YAxis stroke="#9CA3AF" fontSize={12} />
              <Tooltip
                contentStyle={{
                  backgroundColor: '#1F2937',
                  border: '1px solid #374151',
                  borderRadius: '8px'
                }}
              />
              <Bar dataKey="pnl" name="P&L ($)">
                {mockSymbolPerformance.map((entry, index) => (
                  <Cell key={`cell-${index}`} fill={entry.pnl >= 0 ? '#10B981' : '#EF4444'} />
                ))}
              </Bar>
            </BarChart>
          </ResponsiveContainer>
        </div>

        {/* Hourly Activity */}
        <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
          <h3 className="text-lg font-semibold mb-4">Hourly Trading Activity</h3>

          <ResponsiveContainer width="100%" height={300}>
            <LineChart data={mockHourlyData}>
              <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
              <XAxis
                dataKey="hour"
                stroke="#9CA3AF"
                fontSize={12}
                tickFormatter={(value) => `${value}:00`}
              />
              <YAxis stroke="#9CA3AF" fontSize={12} />
              <Tooltip
                contentStyle={{
                  backgroundColor: '#1F2937',
                  border: '1px solid #374151',
                  borderRadius: '8px'
                }}
                labelFormatter={(value) => `${value}:00`}
              />
              <Line
                type="monotone"
                dataKey="trades"
                stroke="#3B82F6"
                strokeWidth={2}
                name="Trades"
              />
              <Line
                type="monotone"
                dataKey="pnl"
                stroke="#10B981"
                strokeWidth={2}
                name="P&L ($)"
              />
            </LineChart>
          </ResponsiveContainer>
        </div>

        {/* Strategy Distribution */}
        <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
          <h3 className="text-lg font-semibold mb-4">Strategy Distribution</h3>

          <div className="flex items-center justify-center">
            <ResponsiveContainer width="100%" height={300}>
              <PieChart>
                <Pie
                  data={mockStrategyPerformance}
                  cx="50%"
                  cy="50%"
                  outerRadius={100}
                  innerRadius={60}
                  paddingAngle={5}
                  dataKey="trades"
                  nameKey="strategy"
                >
                  {mockStrategyPerformance.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                  ))}
                </Pie>
                <Tooltip
                  contentStyle={{
                    backgroundColor: '#1F2937',
                    border: '1px solid #374151',
                    borderRadius: '8px'
                  }}
                />
                <Legend />
              </PieChart>
            </ResponsiveContainer>
          </div>
        </div>
      </div>

      {/* Detailed Tables */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Symbol Performance Table */}
        <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
          <h3 className="text-lg font-semibold mb-4">Symbol Performance Details</h3>

          <div className="overflow-x-auto">
            <table className="w-full">
              <thead>
                <tr className="border-b border-gray-700">
                  <th className="text-left py-2 px-3 text-sm text-gray-400">Symbol</th>
                  <th className="text-left py-2 px-3 text-sm text-gray-400">Trades</th>
                  <th className="text-left py-2 px-3 text-sm text-gray-400">P&L</th>
                  <th className="text-left py-2 px-3 text-sm text-gray-400">Win Rate</th>
                </tr>
              </thead>
              <tbody>
                {mockSymbolPerformance.map(symbol => (
                  <tr key={symbol.symbol} className="border-b border-gray-700">
                    <td className="py-2 px-3 font-semibold">{symbol.symbol}</td>
                    <td className="py-2 px-3 text-sm">{symbol.trades}</td>
                    <td className={`py-2 px-3 text-sm font-mono ${symbol.pnl >= 0 ? 'text-green-400' : 'text-red-400'}`}>
                      ${symbol.pnl.toFixed(2)}
                    </td>
                    <td className="py-2 px-3 text-sm">{symbol.winRate.toFixed(1)}%</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>

        {/* Strategy Performance Table */}
        <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
          <h3 className="text-lg font-semibold mb-4">Strategy Performance Details</h3>

          <div className="overflow-x-auto">
            <table className="w-full">
              <thead>
                <tr className="border-b border-gray-700">
                  <th className="text-left py-2 px-3 text-sm text-gray-400">Strategy</th>
                  <th className="text-left py-2 px-3 text-sm text-gray-400">Trades</th>
                  <th className="text-left py-2 px-3 text-sm text-gray-400">P&L</th>
                  <th className="text-left py-2 px-3 text-sm text-gray-400">Win Rate</th>
                </tr>
              </thead>
              <tbody>
                {mockStrategyPerformance.map(strategy => (
                  <tr key={strategy.strategy} className="border-b border-gray-700">
                    <td className="py-2 px-3 font-semibold">{strategy.strategy}</td>
                    <td className="py-2 px-3 text-sm">{strategy.trades}</td>
                    <td className={`py-2 px-3 text-sm font-mono ${strategy.pnl >= 0 ? 'text-green-400' : 'text-red-400'}`}>
                      ${strategy.pnl.toFixed(2)}
                    </td>
                    <td className="py-2 px-3 text-sm">{strategy.winRate.toFixed(1)}%</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  );
};

export default TradingAnalyticsComponent;