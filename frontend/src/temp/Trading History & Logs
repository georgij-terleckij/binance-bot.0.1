import React, { useState, useEffect, useMemo } from 'react';
import {
  Search,
  Filter,
  Download,
  Calendar,
  TrendingUp,
  TrendingDown,
  Clock,
  DollarSign,
  AlertCircle,
  CheckCircle,
  XCircle,
  BarChart3,
  RefreshCw,
  Eye,
  ExternalLink
} from 'lucide-react';

interface Trade {
  id: string;
  timestamp: string;
  symbol: string;
  side: 'BUY' | 'SELL';
  type: 'MARKET' | 'LIMIT' | 'STOP' | 'STOP_LIMIT';
  quantity: string;
  price: string;
  fee: string;
  pnl: string;
  status: 'FILLED' | 'PARTIALLY_FILLED' | 'CANCELLED' | 'REJECTED';
  strategy: string;
  orderId: string;
}

interface LogEntry {
  id: string;
  timestamp: string;
  level: 'INFO' | 'WARNING' | 'ERROR' | 'DEBUG';
  message: string;
  symbol?: string;
  strategy?: string;
  data?: any;
}

const mockTrades: Trade[] = [
  {
    id: '1',
    timestamp: '2025-05-29T14:30:00Z',
    symbol: 'BTCUSDT',
    side: 'BUY',
    type: 'LIMIT',
    quantity: '0.025',
    price: '43250.00',
    fee: '2.15',
    pnl: '+125.50',
    status: 'FILLED',
    strategy: 'Grid Trading',
    orderId: 'ORDER_123456'
  },
  {
    id: '2',
    timestamp: '2025-05-29T14:15:00Z',
    symbol: 'ETHUSDT',
    side: 'SELL',
    type: 'MARKET',
    quantity: '1.5',
    price: '2567.89',
    fee: '1.92',
    pnl: '-45.20',
    status: 'FILLED',
    strategy: 'DCA',
    orderId: 'ORDER_123455'
  },
  {
    id: '3',
    timestamp: '2025-05-29T14:00:00Z',
    symbol: 'ADAUSDT',
    side: 'BUY',
    type: 'LIMIT',
    quantity: '1000',
    price: '0.4523',
    fee: '0.23',
    pnl: '+15.75',
    status: 'PARTIALLY_FILLED',
    strategy: 'Scalping',
    orderId: 'ORDER_123454'
  }
];

const mockLogs: LogEntry[] = [
  {
    id: '1',
    timestamp: '2025-05-29T14:32:15Z',
    level: 'INFO',
    message: 'Grid trade executed successfully',
    symbol: 'BTCUSDT',
    strategy: 'Grid Trading',
    data: { orderId: 'ORDER_123456', price: '43250.00' }
  },
  {
    id: '2',
    timestamp: '2025-05-29T14:31:45Z',
    level: 'WARNING',
    message: 'Low balance detected for USDT',
    data: { balance: '150.25', threshold: '200.00' }
  },
  {
    id: '3',
    timestamp: '2025-05-29T14:30:12Z',
    level: 'ERROR',
    message: 'Failed to place order: Insufficient balance',
    symbol: 'ETHUSDT',
    data: { requiredBalance: '500.00', availableBalance: '350.25' }
  },
  {
    id: '4',
    timestamp: '2025-05-29T14:29:30Z',
    level: 'INFO',
    message: 'Strategy started for symbol BTCUSDT',
    symbol: 'BTCUSDT',
    strategy: 'Grid Trading'
  }
];

const TradingLogsComponent = () => {
  const [activeTab, setActiveTab] = useState<'trades' | 'logs'>('trades');
  const [trades, setTrades] = useState<Trade[]>(mockTrades);
  const [logs, setLogs] = useState<LogEntry[]>(mockLogs);

  // Filters
  const [tradeFilter, setTradeFilter] = useState({
    symbol: '',
    side: '',
    status: '',
    strategy: '',
    dateFrom: '',
    dateTo: '',
    search: ''
  });

  const [logFilter, setLogFilter] = useState({
    level: '',
    symbol: '',
    search: '',
    dateFrom: '',
    dateTo: ''
  });

  const [isLoading, setIsLoading] = useState(false);

  // Filtered data
  const filteredTrades = useMemo(() => {
    return trades.filter(trade => {
      const matchesSymbol = !tradeFilter.symbol || trade.symbol.toLowerCase().includes(tradeFilter.symbol.toLowerCase());
      const matchesSide = !tradeFilter.side || trade.side === tradeFilter.side;
      const matchesStatus = !tradeFilter.status || trade.status === tradeFilter.status;
      const matchesStrategy = !tradeFilter.strategy || trade.strategy.toLowerCase().includes(tradeFilter.strategy.toLowerCase());
      const matchesSearch = !tradeFilter.search ||
        trade.symbol.toLowerCase().includes(tradeFilter.search.toLowerCase()) ||
        trade.orderId.toLowerCase().includes(tradeFilter.search.toLowerCase());

      const tradeDate = new Date(trade.timestamp);
      const matchesDateFrom = !tradeFilter.dateFrom || tradeDate >= new Date(tradeFilter.dateFrom);
      const matchesDateTo = !tradeFilter.dateTo || tradeDate <= new Date(tradeFilter.dateTo);

      return matchesSymbol && matchesSide && matchesStatus && matchesStrategy && matchesSearch && matchesDateFrom && matchesDateTo;
    });
  }, [trades, tradeFilter]);

  const filteredLogs = useMemo(() => {
    return logs.filter(log => {
      const matchesLevel = !logFilter.level || log.level === logFilter.level;
      const matchesSymbol = !logFilter.symbol || (log.symbol && log.symbol.toLowerCase().includes(logFilter.symbol.toLowerCase()));
      const matchesSearch = !logFilter.search ||
        log.message.toLowerCase().includes(logFilter.search.toLowerCase());

      const logDate = new Date(log.timestamp);
      const matchesDateFrom = !logFilter.dateFrom || logDate >= new Date(logFilter.dateFrom);
      const matchesDateTo = !logFilter.dateTo || logDate <= new Date(logFilter.dateTo);

      return matchesLevel && matchesSymbol && matchesSearch && matchesDateFrom && matchesDateTo;
    });
  }, [logs, logFilter]);

  // Statistics
  const tradeStats = useMemo(() => {
    const totalTrades = filteredTrades.length;
    const totalPnL = filteredTrades.reduce((sum, trade) => sum + parseFloat(trade.pnl.replace(/[+$,]/g, '')), 0);
    const totalFees = filteredTrades.reduce((sum, trade) => sum + parseFloat(trade.fee), 0);
    const winningTrades = filteredTrades.filter(trade => parseFloat(trade.pnl.replace(/[+$,]/g, '')) > 0).length;
    const winRate = totalTrades > 0 ? (winningTrades / totalTrades) * 100 : 0;

    return { totalTrades, totalPnL, totalFees, winRate };
  }, [filteredTrades]);

  const refreshData = async () => {
    setIsLoading(true);
    try {
      // В реальном приложении:
      // const [tradesResponse, logsResponse] = await Promise.all([
      //   apiService.getTrades(),
      //   apiService.getLogs()
      // ]);
      // setTrades(tradesResponse.data);
      // setLogs(logsResponse.data);

      // Mock refresh
      setTimeout(() => {
        setIsLoading(false);
      }, 1000);
    } catch (error) {
      console.error('Failed to refresh data:', error);
      setIsLoading(false);
    }
  };

  const exportData = (type: 'trades' | 'logs') => {
    const data = type === 'trades' ? filteredTrades : filteredLogs;
    const csvContent = type === 'trades'
      ? 'Timestamp,Symbol,Side,Type,Quantity,Price,Fee,PnL,Status,Strategy,OrderID\n' +
        data.map(trade => `${trade.timestamp},${trade.symbol},${trade.side},${trade.type},${trade.quantity},${trade.price},${trade.fee},${trade.pnl},${trade.status},${trade.strategy},${trade.orderId}`).join('\n')
      : 'Timestamp,Level,Message,Symbol,Strategy\n' +
        data.map(log => `${log.timestamp},${log.level},${log.message},${log.symbol || ''},${log.strategy || ''}`).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${type}_${new Date().toISOString().split('T')[0]}.csv`;
    a.click();
    window.URL.revokeObjectURL(url);
  };

  const clearFilters = () => {
    if (activeTab === 'trades') {
      setTradeFilter({
        symbol: '',
        side: '',
        status: '',
        strategy: '',
        dateFrom: '',
        dateTo: '',
        search: ''
      });
    } else {
      setLogFilter({
        level: '',
        symbol: '',
        search: '',
        dateFrom: '',
        dateTo: ''
      });
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'FILLED':
        return <CheckCircle className="w-4 h-4 text-green-400" />;
      case 'PARTIALLY_FILLED':
        return <Clock className="w-4 h-4 text-yellow-400" />;
      case 'CANCELLED':
      case 'REJECTED':
        return <XCircle className="w-4 h-4 text-red-400" />;
      default:
        return <Clock className="w-4 h-4 text-gray-400" />;
    }
  };

  const getLogLevelColor = (level: string) => {
    switch (level) {
      case 'ERROR':
        return 'text-red-400 bg-red-900';
      case 'WARNING':
        return 'text-yellow-400 bg-yellow-900';
      case 'INFO':
        return 'text-blue-400 bg-blue-900';
      case 'DEBUG':
        return 'text-gray-400 bg-gray-700';
      default:
        return 'text-gray-400 bg-gray-700';
    }
  };

  return (
    <div className="p-6 bg-gray-900 text-white min-h-screen">
      {/* Header */}
      <div className="mb-8">
        <div className="flex items-center justify-between mb-4">
          <div>
            <h1 className="text-3xl font-bold mb-2">Trading History & Logs</h1>
            <p className="text-gray-400">Monitor your trading activity and system logs</p>
          </div>
          <button
            onClick={refreshData}
            disabled={isLoading}
            className="flex items-center space-x-2 px-4 py-2 bg-blue-600 hover:bg-blue-700 disabled:opacity-50 rounded-lg transition-colors"
          >
            <RefreshCw className={`w-4 h-4 ${isLoading ? 'animate-spin' : ''}`} />
            <span>Refresh</span>
          </button>
        </div>

        {/* Stats Cards */}
        {activeTab === 'trades' && (
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
            <div className="bg-gray-800 rounded-lg p-4 border border-gray-700">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-gray-400 text-sm">Total Trades</p>
                  <p className="text-xl font-bold">{tradeStats.totalTrades}</p>
                </div>
                <BarChart3 className="w-6 h-6 text-blue-400" />
              </div>
            </div>

            <div className="bg-gray-800 rounded-lg p-4 border border-gray-700">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-gray-400 text-sm">Total P&L</p>
                  <p className={`text-xl font-bold ${tradeStats.totalPnL >= 0 ? 'text-green-400' : 'text-red-400'}`}>
                    ${tradeStats.totalPnL.toFixed(2)}
                  </p>
                </div>
                <DollarSign className="w-6 h-6 text-green-400" />
              </div>
            </div>

            <div className="bg-gray-800 rounded-lg p-4 border border-gray-700">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-gray-400 text-sm">Total Fees</p>
                  <p className="text-xl font-bold text-red-400">${tradeStats.totalFees.toFixed(2)}</p>
                </div>
                <TrendingDown className="w-6 h-6 text-red-400" />
              </div>
            </div>

            <div className="bg-gray-800 rounded-lg p-4 border border-gray-700">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-gray-400 text-sm">Win Rate</p>
                  <p className="text-xl font-bold text-green-400">{tradeStats.winRate.toFixed(1)}%</p>
                </div>
                <TrendingUp className="w-6 h-6 text-green-400" />
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Navigation Tabs */}
      <div className="mb-6 border-b border-gray-700">
        <nav className="flex space-x-8">
          {[
            { id: 'trades', label: 'Trading History', count: filteredTrades.length },
            { id: 'logs', label: 'System Logs', count: filteredLogs.length }
          ].map(tab => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id as 'trades' | 'logs')}
              className={`flex items-center space-x-2 py-4 px-1 border-b-2 font-medium text-sm ${
                activeTab === tab.id
                  ? 'border-blue-500 text-blue-500'
                  : 'border-transparent text-gray-400 hover:text-gray-200'
              }`}
            >
              <span>{tab.label}</span>
              <span className="bg-gray-700 text-gray-300 px-2 py-1 rounded-full text-xs">
                {tab.count}
              </span>
            </button>
          ))}
        </nav>
      </div>

      {/* Filters */}
      <div className="mb-6 bg-gray-800 rounded-lg p-4 border border-gray-700">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-lg font-semibold">Filters</h3>
          <div className="flex space-x-2">
            <button
              onClick={clearFilters}
              className="px-3 py-1 bg-gray-600 hover:bg-gray-700 rounded text-sm transition-colors"
            >
              Clear All
            </button>
            <button
              onClick={() => exportData(activeTab)}
              className="flex items-center space-x-1 px-3 py-1 bg-green-600 hover:bg-green-700 rounded text-sm transition-colors"
            >
              <Download className="w-4 h-4" />
              <span>Export CSV</span>
            </button>
          </div>
        </div>

        {activeTab === 'trades' ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-1">Search</label>
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
                <input
                  type="text"
                  value={tradeFilter.search}
                  onChange={(e) => setTradeFilter(prev => ({ ...prev, search: e.target.value }))}
                  placeholder="Symbol, Order ID..."
                  className="w-full pl-10 pr-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-300 mb-1">Symbol</label>
              <input
                type="text"
                value={tradeFilter.symbol}
                onChange={(e) => setTradeFilter(prev => ({ ...prev, symbol: e.target.value }))}
                placeholder="BTCUSDT, ETHUSDT..."
                className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-300 mb-1">Side</label>
              <select
                value={tradeFilter.side}
                onChange={(e) => setTradeFilter(prev => ({ ...prev, side: e.target.value }))}
                className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="">All Sides</option>
                <option value="BUY">Buy</option>
                <option value="SELL">Sell</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-300 mb-1">Status</label>
              <select
                value={tradeFilter.status}
                onChange={(e) => setTradeFilter(prev => ({ ...prev, status: e.target.value }))}
                className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="">All Status</option>
                <option value="FILLED">Filled</option>
                <option value="PARTIALLY_FILLED">Partially Filled</option>
                <option value="CANCELLED">Cancelled</option>
                <option value="REJECTED">Rejected</option>
              </select>
            </div>
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-1">Search</label>
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
                <input
                  type="text"
                  value={logFilter.search}
                  onChange={(e) => setLogFilter(prev => ({ ...prev, search: e.target.value }))}
                  placeholder="Search messages..."
                  className="w-full pl-10 pr-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-300 mb-1">Level</label>
              <select
                value={logFilter.level}
                onChange={(e) => setLogFilter(prev => ({ ...prev, level: e.target.value }))}
                className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="">All Levels</option>
                <option value="DEBUG">Debug</option>
                <option value="INFO">Info</option>
                <option value="WARNING">Warning</option>
                <option value="ERROR">Error</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-300 mb-1">Symbol</label>
              <input
                type="text"
                value={logFilter.symbol}
                onChange={(e) => setLogFilter(prev => ({ ...prev, symbol: e.target.value }))}
                placeholder="BTCUSDT, ETHUSDT..."
                className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-300 mb-1">Date Range</label>
              <input
                type="date"
                value={logFilter.dateFrom}
                onChange={(e) => setLogFilter(prev => ({ ...prev, dateFrom: e.target.value }))}
                className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
          </div>
        )}
      </div>

      {/* Content */}
      <div className="bg-gray-800 rounded-lg border border-gray-700">
        {activeTab === 'trades' ? (
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead>
                <tr className="border-b border-gray-700">
                  <th className="text-left py-4 px-6">Time</th>
                  <th className="text-left py-4 px-6">Symbol</th>
                  <th className="text-left py-4 px-6">Side</th>
                  <th className="text-left py-4 px-6">Type</th>
                  <th className="text-left py-4 px-6">Quantity</th>
                  <th className="text-left py-4 px-6">Price</th>
                  <th className="text-left py-4 px-6">Fee</th>
                  <th className="text-left py-4 px-6">P&L</th>
                  <th className="text-left py-4 px-6">Status</th>
                  <th className="text-left py-4 px-6">Strategy</th>
                  <th className="text-left py-4 px-6">Actions</th>
                </tr>
              </thead>
              <tbody>
                {filteredTrades.map(trade => (
                  <tr key={trade.id} className="border-b border-gray-700 hover:bg-gray-700">
                    <td className="py-4 px-6 text-sm text-gray-400">
                      {new Date(trade.timestamp).toLocaleString()}
                    </td>
                    <td className="py-4 px-6 font-semibold">{trade.symbol}</td>
                    <td className={`py-4 px-6 ${trade.side === 'BUY' ? 'text-green-400' : 'text-red-400'}`}>
                      {trade.side}
                    </td>
                    <td className="py-4 px-6 text-gray-300">{trade.type}</td>
                    <td className="py-4 px-6 font-mono">{trade.quantity}</td>
                    <td className="py-4 px-6 font-mono">${trade.price}</td>
                    <td className="py-4 px-6 font-mono text-red-400">${trade.fee}</td>
                    <td className={`py-4 px-6 font-mono ${trade.pnl.startsWith('+') ? 'text-green-400' : 'text-red-400'}`}>
                      {trade.pnl}
                    </td>
                    <td className="py-4 px-6">
                      <div className="flex items-center space-x-2">
                        {getStatusIcon(trade.status)}
                        <span className="text-sm">{trade.status}</span>
                      </div>
                    </td>
                    <td className="py-4 px-6 text-sm text-gray-400">{trade.strategy}</td>
                    <td className="py-4 px-6">
                      <button
                        className="p-1 text-gray-400 hover:text-white hover:bg-gray-600 rounded"
                        title="View Details"
                      >
                        <Eye className="w-4 h-4" />
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>

            {filteredTrades.length === 0 && (
              <div className="text-center py-12 text-gray-400">
                <BarChart3 className="w-12 h-12 mx-auto mb-4 opacity-50" />
                <p>No trades found matching your filters</p>
              </div>
            )}
          </div>
        ) : (
          <div className="p-6">
            <div className="space-y-3">
              {filteredLogs.map(log => (
                <div key={log.id} className="flex items-start space-x-4 p-4 bg-gray-700 rounded-lg">
                  <div className="flex-shrink-0">
                    <span className={`px-2 py-1 rounded text-xs font-medium ${getLogLevelColor(log.level)}`}>
                      {log.level}
                    </span>
                  </div>

                  <div className="flex-1 min-w-0">
                    <div className="flex items-center justify-between mb-2">
                      <p className="text-white font-medium">{log.message}</p>
                      <span className="text-xs text-gray-400">
                        {new Date(log.timestamp).toLocaleString()}
                      </span>
                    </div>

                    <div className="flex items-center space-x-4 text-sm text-gray-400">
                      {log.symbol && (
                        <span className="flex items-center space-x-1">
                          <span>Symbol:</span>
                          <span className="text-white">{log.symbol}</span>
                        </span>
                      )}
                      {log.strategy && (
                        <span className="flex items-center space-x-1">
                          <span>Strategy:</span>
                          <span className="text-white">{log.strategy}</span>
                        </span>
                      )}
                    </div>

                    {log.data && (
                      <details className="mt-2">
                        <summary className="cursor-pointer text-xs text-blue-400 hover:text-blue-300">
                          Show Details
                        </summary>
                        <pre className="mt-2 p-2 bg-gray-800 rounded text-xs text-gray-300 overflow-x-auto">
                          {JSON.stringify(log.data, null, 2)}
                        </pre>
                      </details>
                    )}
                  </div>
                </div>
              ))}
            </div>

            {filteredLogs.length === 0 && (
              <div className="text-center py-12 text-gray-400">
                <AlertCircle className="w-12 h-12 mx-auto mb-4 opacity-50" />
                <p>No logs found matching your filters</p>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default TradingLogsComponent;