import React, { useState, useEffect } from 'react';
import {
  Settings,
  Save,
  RotateCcw,
  AlertCircle,
  CheckCircle,
  Eye,
  EyeOff,
  HelpCircle,
  Shield,
  Zap,
  TrendingUp,
  DollarSign
} from 'lucide-react';

interface BotSettings {
  // API Keys
  apiKey: string;
  apiSecret: string;

  // Trading Settings
  maxPositions: number;
  maxRiskPerTrade: number;
  stopLossPercent: number;
  takeProfitPercent: number;

  // Strategy Settings
  strategy: 'grid' | 'dca' | 'scalping';
  gridLevels: number;
  gridSpacing: number;
  baseOrderSize: number;

  // Risk Management
  dailyLossLimit: number;
  maxDrawdown: number;
  enableStopLoss: boolean;
  enableTakeProfit: boolean;

  // Notifications
  enableTelegramNotifications: boolean;
  telegramBotToken: string;
  telegramChatId: string;

  // Advanced
  enablePaperTrading: boolean;
  logLevel: 'DEBUG' | 'INFO' | 'WARNING' | 'ERROR';
}

const defaultSettings: BotSettings = {
  apiKey: '',
  apiSecret: '',
  maxPositions: 5,
  maxRiskPerTrade: 2,
  stopLossPercent: 3,
  takeProfitPercent: 5,
  strategy: 'grid',
  gridLevels: 10,
  gridSpacing: 0.5,
  baseOrderSize: 100,
  dailyLossLimit: 100,
  maxDrawdown: 10,
  enableStopLoss: true,
  enableTakeProfit: true,
  enableTelegramNotifications: false,
  telegramBotToken: '',
  telegramChatId: '',
  enablePaperTrading: true,
  logLevel: 'INFO'
};

const BotSettingsComponent = () => {
  const [settings, setSettings] = useState<BotSettings>(defaultSettings);
  const [isLoading, setIsLoading] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [message, setMessage] = useState<{ type: 'success' | 'error', text: string } | null>(null);
  const [showApiSecret, setShowApiSecret] = useState(false);
  const [activeTab, setActiveTab] = useState('trading');

  // Загрузка настроек при монтировании
  useEffect(() => {
    loadSettings();
  }, []);

  const loadSettings = async () => {
    setIsLoading(true);
    try {
      // В реальном приложении:
      // const response = await apiService.getSettings();
      // if (response.success) {
      //   setSettings(response.data);
      // }

      // Mock для демонстрации
      setTimeout(() => {
        setSettings(defaultSettings);
        setIsLoading(false);
      }, 1000);
    } catch (error) {
      console.error('Failed to load settings:', error);
      setMessage({ type: 'error', text: 'Failed to load settings' });
      setIsLoading(false);
    }
  };

  const saveSettings = async () => {
    setIsSaving(true);
    try {
      // В реальном приложении:
      // const response = await apiService.updateSettings(settings);
      // if (response.success) {
      //   setMessage({ type: 'success', text: 'Settings saved successfully' });
      // }

      // Mock для демонстрации
      setTimeout(() => {
        setMessage({ type: 'success', text: 'Settings saved successfully' });
        setIsSaving(false);
      }, 1000);
    } catch (error) {
      console.error('Failed to save settings:', error);
      setMessage({ type: 'error', text: 'Failed to save settings' });
      setIsSaving(false);
    }
  };

  const resetSettings = () => {
    if (window.confirm('Are you sure you want to reset all settings to default?')) {
      setSettings(defaultSettings);
      setMessage({ type: 'success', text: 'Settings reset to default' });
    }
  };

  const handleInputChange = (field: keyof BotSettings, value: any) => {
    setSettings(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const validateSettings = () => {
    const errors: string[] = [];

    if (!settings.apiKey) errors.push('API Key is required');
    if (!settings.apiSecret) errors.push('API Secret is required');
    if (settings.maxRiskPerTrade <= 0 || settings.maxRiskPerTrade > 10) {
      errors.push('Max risk per trade must be between 0 and 10%');
    }
    if (settings.stopLossPercent <= 0) errors.push('Stop loss must be greater than 0');
    if (settings.takeProfitPercent <= 0) errors.push('Take profit must be greater than 0');

    return errors;
  };

  const InputField = ({
    label,
    value,
    onChange,
    type = 'text',
    placeholder = '',
    help = '',
    required = false,
    min,
    max,
    step
  }: {
    label: string;
    value: any;
    onChange: (value: any) => void;
    type?: string;
    placeholder?: string;
    help?: string;
    required?: boolean;
    min?: number;
    max?: number;
    step?: number;
  }) => (
    <div className="mb-4">
      <div className="flex items-center mb-2">
        <label className="block text-sm font-medium text-gray-200">
          {label}
          {required && <span className="text-red-400 ml-1">*</span>}
        </label>
        {help && (
          <div className="ml-2 group relative">
            <HelpCircle className="w-4 h-4 text-gray-400 cursor-help" />
            <div className="absolute bottom-6 left-1/2 transform -translate-x-1/2 bg-gray-700 text-white text-xs rounded p-2 opacity-0 group-hover:opacity-100 transition-opacity w-48 z-10">
              {help}
            </div>
          </div>
        )}
      </div>
      <input
        type={type}
        value={value}
        onChange={(e) => onChange(type === 'number' ? parseFloat(e.target.value) || 0 : e.target.value)}
        placeholder={placeholder}
        min={min}
        max={max}
        step={step}
        className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
      />
    </div>
  );

  const CheckboxField = ({ label, checked, onChange, help = '' }: {
    label: string;
    checked: boolean;
    onChange: (checked: boolean) => void;
    help?: string;
  }) => (
    <div className="mb-4">
      <div className="flex items-center">
        <input
          type="checkbox"
          checked={checked}
          onChange={(e) => onChange(e.target.checked)}
          className="mr-3 w-4 h-4 text-blue-600 bg-gray-700 border-gray-600 rounded focus:ring-blue-500"
        />
        <label className="text-sm font-medium text-gray-200">{label}</label>
        {help && (
          <div className="ml-2 group relative">
            <HelpCircle className="w-4 h-4 text-gray-400 cursor-help" />
            <div className="absolute bottom-6 left-1/2 transform -translate-x-1/2 bg-gray-700 text-white text-xs rounded p-2 opacity-0 group-hover:opacity-100 transition-opacity w-48 z-10">
              {help}
            </div>
          </div>
        )}
      </div>
    </div>
  );

  const SelectField = ({ label, value, onChange, options, help = '' }: {
    label: string;
    value: string;
    onChange: (value: string) => void;
    options: { value: string; label: string }[];
    help?: string;
  }) => (
    <div className="mb-4">
      <div className="flex items-center mb-2">
        <label className="block text-sm font-medium text-gray-200">{label}</label>
        {help && (
          <div className="ml-2 group relative">
            <HelpCircle className="w-4 h-4 text-gray-400 cursor-help" />
            <div className="absolute bottom-6 left-1/2 transform -translate-x-1/2 bg-gray-700 text-white text-xs rounded p-2 opacity-0 group-hover:opacity-100 transition-opacity w-48 z-10">
              {help}
            </div>
          </div>
        )}
      </div>
      <select
        value={value}
        onChange={(e) => onChange(e.target.value)}
        className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
      >
        {options.map(option => (
          <option key={option.value} value={option.value}>{option.label}</option>
        ))}
      </select>
    </div>
  );

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
        <span className="ml-4 text-gray-400">Loading settings...</span>
      </div>
    );
  }

  return (
    <div className="max-w-4xl mx-auto p-6 bg-gray-900 text-white">
      <div className="mb-8">
        <h1 className="text-3xl font-bold mb-2">Bot Settings</h1>
        <p className="text-gray-400">Configure your trading bot parameters</p>
      </div>

      {/* Message */}
      {message && (
        <div className={`mb-6 p-4 rounded-lg border ${
          message.type === 'success'
            ? 'bg-green-900 border-green-700 text-green-200'
            : 'bg-red-900 border-red-700 text-red-200'
        }`}>
          <div className="flex items-center">
            {message.type === 'success' ?
              <CheckCircle className="w-5 h-5 mr-2" /> :
              <AlertCircle className="w-5 h-5 mr-2" />
            }
            {message.text}
          </div>
        </div>
      )}

      {/* Navigation Tabs */}
      <div className="mb-8 border-b border-gray-700">
        <nav className="flex space-x-8">
          {[
            { id: 'trading', label: 'Trading', icon: TrendingUp },
            { id: 'risk', label: 'Risk Management', icon: Shield },
            { id: 'strategy', label: 'Strategy', icon: Zap },
            { id: 'notifications', label: 'Notifications', icon: AlertCircle },
            { id: 'advanced', label: 'Advanced', icon: Settings }
          ].map(tab => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id)}
              className={`flex items-center space-x-2 py-4 px-1 border-b-2 font-medium text-sm ${
                activeTab === tab.id
                  ? 'border-blue-500 text-blue-500'
                  : 'border-transparent text-gray-400 hover:text-gray-200'
              }`}
            >
              <tab.icon className="w-4 h-4" />
              <span>{tab.label}</span>
            </button>
          ))}
        </nav>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* Trading Settings */}
        {activeTab === 'trading' && (
          <>
            <div className="bg-gray-800 rounded-lg p-6">
              <h2 className="text-xl font-semibold mb-4 flex items-center">
                <Shield className="w-5 h-5 mr-2" />
                API Configuration
              </h2>

              <InputField
                label="API Key"
                value={settings.apiKey}
                onChange={(value) => handleInputChange('apiKey', value)}
                placeholder="Enter your Binance API Key"
                required
                help="Your Binance API key for trading access"
              />

              <div className="relative">
                <InputField
                  label="API Secret"
                  value={settings.apiSecret}
                  onChange={(value) => handleInputChange('apiSecret', value)}
                  type={showApiSecret ? 'text' : 'password'}
                  placeholder="Enter your Binance API Secret"
                  required
                  help="Your Binance API secret (keep it secure)"
                />
                <button
                  type="button"
                  onClick={() => setShowApiSecret(!showApiSecret)}
                  className="absolute right-3 top-9 text-gray-400 hover:text-white"
                >
                  {showApiSecret ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
                </button>
              </div>
            </div>

            <div className="bg-gray-800 rounded-lg p-6">
              <h2 className="text-xl font-semibold mb-4 flex items-center">
                <DollarSign className="w-5 h-5 mr-2" />
                Trading Parameters
              </h2>

              <InputField
                label="Max Positions"
                value={settings.maxPositions}
                onChange={(value) => handleInputChange('maxPositions', value)}
                type="number"
                min={1}
                max={20}
                help="Maximum number of concurrent positions"
              />

              <InputField
                label="Max Risk per Trade (%)"
                value={settings.maxRiskPerTrade}
                onChange={(value) => handleInputChange('maxRiskPerTrade', value)}
                type="number"
                min={0.1}
                max={10}
                step={0.1}
                help="Maximum percentage of portfolio to risk in a single trade"
              />

              <InputField
                label="Base Order Size ($)"
                value={settings.baseOrderSize}
                onChange={(value) => handleInputChange('baseOrderSize', value)}
                type="number"
                min={10}
                help="Base order size in USDT"
              />
            </div>
          </>
        )}

        {/* Risk Management */}
        {activeTab === 'risk' && (
          <>
            <div className="bg-gray-800 rounded-lg p-6">
              <h2 className="text-xl font-semibold mb-4 flex items-center">
                <Shield className="w-5 h-5 mr-2" />
                Stop Loss & Take Profit
              </h2>

              <CheckboxField
                label="Enable Stop Loss"
                checked={settings.enableStopLoss}
                onChange={(value) => handleInputChange('enableStopLoss', value)}
                help="Automatically close losing positions"
              />

              <InputField
                label="Stop Loss (%)"
                value={settings.stopLossPercent}
                onChange={(value) => handleInputChange('stopLossPercent', value)}
                type="number"
                min={0.1}
                max={50}
                step={0.1}
                help="Percentage loss to trigger stop loss"
              />

              <CheckboxField
                label="Enable Take Profit"
                checked={settings.enableTakeProfit}
                onChange={(value) => handleInputChange('enableTakeProfit', value)}
                help="Automatically close winning positions"
              />

              <InputField
                label="Take Profit (%)"
                value={settings.takeProfitPercent}
                onChange={(value) => handleInputChange('takeProfitPercent', value)}
                type="number"
                min={0.1}
                max={100}
                step={0.1}
                help="Percentage gain to trigger take profit"
              />
            </div>

            <div className="bg-gray-800 rounded-lg p-6">
              <h2 className="text-xl font-semibold mb-4">Risk Limits</h2>

              <InputField
                label="Daily Loss Limit ($)"
                value={settings.dailyLossLimit}
                onChange={(value) => handleInputChange('dailyLossLimit', value)}
                type="number"
                min={0}
                help="Maximum loss allowed per day"
              />

              <InputField
                label="Max Drawdown (%)"
                value={settings.maxDrawdown}
                onChange={(value) => handleInputChange('maxDrawdown', value)}
                type="number"
                min={1}
                max={50}
                step={0.1}
                help="Maximum portfolio drawdown before stopping"
              />
            </div>
          </>
        )}

        {/* Strategy Settings */}
        {activeTab === 'strategy' && (
          <>
            <div className="bg-gray-800 rounded-lg p-6">
              <h2 className="text-xl font-semibold mb-4 flex items-center">
                <Zap className="w-5 h-5 mr-2" />
                Strategy Configuration
              </h2>

              <SelectField
                label="Trading Strategy"
                value={settings.strategy}
                onChange={(value) => handleInputChange('strategy', value)}
                options={[
                  { value: 'grid', label: 'Grid Trading' },
                  { value: 'dca', label: 'Dollar Cost Averaging' },
                  { value: 'scalping', label: 'Scalping' }
                ]}
                help="Select your preferred trading strategy"
              />

              {settings.strategy === 'grid' && (
                <>
                  <InputField
                    label="Grid Levels"
                    value={settings.gridLevels}
                    onChange={(value) => handleInputChange('gridLevels', value)}
                    type="number"
                    min={3}
                    max={50}
                    help="Number of grid trading levels"
                  />

                  <InputField
                    label="Grid Spacing (%)"
                    value={settings.gridSpacing}
                    onChange={(value) => handleInputChange('gridSpacing', value)}
                    type="number"
                    min={0.1}
                    max={10}
                    step={0.1}
                    help="Percentage spacing between grid levels"
                  />
                </>
              )}
            </div>

            <div className="bg-gray-800 rounded-lg p-6">
              <h2 className="text-xl font-semibold mb-4">Strategy Info</h2>
              <div className="space-y-4">
                {settings.strategy === 'grid' && (
                  <div className="p-4 bg-gray-700 rounded-lg">
                    <h3 className="font-semibold text-green-400 mb-2">Grid Trading</h3>
                    <p className="text-sm text-gray-300">
                      Places multiple buy and sell orders at predetermined intervals above and below the current market price.
                      Profits from market volatility by capturing small price movements.
                    </p>
                  </div>
                )}
                {settings.strategy === 'dca' && (
                  <div className="p-4 bg-gray-700 rounded-lg">
                    <h3 className="font-semibold text-blue-400 mb-2">Dollar Cost Averaging</h3>
                    <p className="text-sm text-gray-300">
                      Invests a fixed amount regularly regardless of price. Reduces the impact of volatility
                      on large purchases of assets.
                    </p>
                  </div>
                )}
                {settings.strategy === 'scalping' && (
                  <div className="p-4 bg-gray-700 rounded-lg">
                    <h3 className="font-semibold text-yellow-400 mb-2">Scalping</h3>
                    <p className="text-sm text-gray-300">
                      Makes many small profits on minor price changes. Requires high-frequency trading
                      and quick decision making.
                    </p>
                  </div>
                )}
              </div>
            </div>
          </>
        )}

        {/* Notifications */}
        {activeTab === 'notifications' && (
          <>
            <div className="bg-gray-800 rounded-lg p-6">
              <h2 className="text-xl font-semibold mb-4 flex items-center">
                <AlertCircle className="w-5 h-5 mr-2" />
                Telegram Notifications
              </h2>

              <CheckboxField
                label="Enable Telegram Notifications"
                checked={settings.enableTelegramNotifications}
                onChange={(value) => handleInputChange('enableTelegramNotifications', value)}
                help="Receive trading alerts via Telegram"
              />

              {settings.enableTelegramNotifications && (
                <>
                  <InputField
                    label="Telegram Bot Token"
                    value={settings.telegramBotToken}
                    onChange={(value) => handleInputChange('telegramBotToken', value)}
                    placeholder="123456789:ABCdefGHIjklMNOpqrSTUvwxyz"
                    help="Your Telegram bot token from @BotFather"
                  />

                  <InputField
                    label="Telegram Chat ID"
                    value={settings.telegramChatId}
                    onChange={(value) => handleInputChange('telegramChatId', value)}
                    placeholder="-123456789"
                    help="Your Telegram chat ID (can be negative for groups)"
                  />
                </>
              )}
            </div>

            <div className="bg-gray-800 rounded-lg p-6">
              <h2 className="text-xl font-semibold mb-4">Notification Types</h2>
              <div className="space-y-3">
                <div className="flex items-center justify-between p-3 bg-gray-700 rounded">
                  <span className="text-sm">Trade Executions</span>
                  <span className="text-green-400 text-sm">✓ Enabled</span>
                </div>
                <div className="flex items-center justify-between p-3 bg-gray-700 rounded">
                  <span className="text-sm">Stop Loss Triggers</span>
                  <span className="text-red-400 text-sm">✓ Enabled</span>
                </div>
                <div className="flex items-center justify-between p-3 bg-gray-700 rounded">
                  <span className="text-sm">Daily Summary</span>
                  <span className="text-blue-400 text-sm">✓ Enabled</span>
                </div>
                <div className="flex items-center justify-between p-3 bg-gray-700 rounded">
                  <span className="text-sm">Error Alerts</span>
                  <span className="text-yellow-400 text-sm">✓ Enabled</span>
                </div>
              </div>
            </div>
          </>
        )}

        {/* Advanced */}
        {activeTab === 'advanced' && (
          <>
            <div className="bg-gray-800 rounded-lg p-6">
              <h2 className="text-xl font-semibold mb-4 flex items-center">
                <Settings className="w-5 h-5 mr-2" />
                Advanced Settings
              </h2>

              <CheckboxField
                label="Enable Paper Trading"
                checked={settings.enablePaperTrading}
                onChange={(value) => handleInputChange('enablePaperTrading', value)}
                help="Test strategies without real money"
              />

              <SelectField
                label="Log Level"
                value={settings.logLevel}
                onChange={(value) => handleInputChange('logLevel', value)}
                options={[
                  { value: 'DEBUG', label: 'Debug (Verbose)' },
                  { value: 'INFO', label: 'Info (Normal)' },
                  { value: 'WARNING', label: 'Warning (Important)' },
                  { value: 'ERROR', label: 'Error (Critical Only)' }
                ]}
                help="Set the logging verbosity level"
              />
            </div>

            <div className="bg-gray-800 rounded-lg p-6">
              <h2 className="text-xl font-semibold mb-4">Danger Zone</h2>
              <div className="space-y-4">
                <div className="p-4 border border-red-700 rounded-lg bg-red-900 bg-opacity-20">
                  <h3 className="font-semibold text-red-400 mb-2">Reset Settings</h3>
                  <p className="text-sm text-gray-300 mb-3">
                    This will reset all settings to their default values. This action cannot be undone.
                  </p>
                  <button
                    onClick={resetSettings}
                    className="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg text-sm"
                  >
                    Reset to Defaults
                  </button>
                </div>
              </div>
            </div>
          </>
        )}
      </div>

      {/* Action Buttons */}
      <div className="mt-8 flex justify-end space-x-4">
        <button
          onClick={resetSettings}
          className="flex items-center space-x-2 px-6 py-3 bg-gray-700 hover:bg-gray-600 text-white rounded-lg transition-colors"
        >
          <RotateCcw className="w-4 h-4" />
          <span>Reset</span>
        </button>

        <button
          onClick={saveSettings}
          disabled={isSaving}
          className="flex items-center space-x-2 px-6 py-3 bg-blue-600 hover:bg-blue-700 disabled:opacity-50 text-white rounded-lg transition-colors"
        >
          {isSaving ? (
            <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
          ) : (
            <Save className="w-4 h-4" />
          )}
          <span>{isSaving ? 'Saving...' : 'Save Settings'}</span>
        </button>
      </div>

      {/* Validation Errors */}
      {validateSettings().length > 0 && (
        <div className="mt-6 p-4 bg-red-900 border border-red-700 rounded-lg">
          <h3 className="font-semibold text-red-200 mb-2">Please fix the following issues:</h3>
          <ul className="text-red-300 text-sm space-y-1">
            {validateSettings().map((error, index) => (
              <li key={index}>• {error}</li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
};

export default BotSettingsComponent;